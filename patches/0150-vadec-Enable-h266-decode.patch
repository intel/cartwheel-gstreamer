From 30fa4a62e753dfecb1d0213f1a142eb78b77ce0e Mon Sep 17 00:00:00 2001
From: Ana Schuch <ana.schuch@intel.com>
Date: Mon, 23 Jun 2025 14:58:30 -0700
Subject: [PATCH] Enable h266 decode

---
 .../gst-libs/gst/codecparsers/gsth266parser.c | 151 ++++++++++++++++++
 .../gst-libs/gst/codecparsers/gsth266parser.h |  10 ++
 .../gst-libs/gst/codecs/gsth266decoder.c      | 115 ++++++++++++-
 3 files changed, 269 insertions(+), 7 deletions(-)

diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gsth266parser.c b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gsth266parser.c
index ec861dea474..da48a028513 100644
--- a/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gsth266parser.c
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gsth266parser.c
@@ -1924,6 +1924,157 @@ gst_h266_parser_identify_nalu_vvc (GstH266Parser * parser,
   return GST_H266_PARSER_OK;
 }
 
+GstH266ParserResult
+gst_h266_parser_identify_and_split_nalu_vvc (GstH266Parser * nalparser,
+    const guint8 * data, guint offset, gsize size, guint8 nal_length_size,
+    GArray * nalus, gsize * consumed)
+{
+  GstBitReader br;
+  guint nalu_size;
+  guint remaining;
+  guint off;
+  guint sc_size;
+
+  g_return_val_if_fail (data != NULL, GST_H266_PARSER_ERROR);
+  g_return_val_if_fail (nalus != NULL, GST_H266_PARSER_ERROR);
+  g_return_val_if_fail (nal_length_size > 0 && nal_length_size < 5,
+      GST_H266_PARSER_ERROR);
+
+  g_array_set_size (nalus, 0);
+
+  if (consumed)
+    *consumed = 0;
+
+  /* Would overflow guint below otherwise: the callers needs to ensure that
+   * this never happens */
+  if (offset > G_MAXUINT32 - nal_length_size) {
+    GST_WARNING ("offset + nal_length_size overflow");
+    return GST_H266_PARSER_BROKEN_DATA;
+  }
+
+  if (size < offset + nal_length_size) {
+    GST_DEBUG ("Can't parse, buffer has too small size %" G_GSIZE_FORMAT
+        ", offset %u", size, offset);
+    return GST_H266_PARSER_ERROR;
+  }
+
+  /* Read nal unit size and unwrap the size field */
+  gst_bit_reader_init (&br, data + offset, size - offset);
+  nalu_size = gst_bit_reader_get_bits_uint32_unchecked (&br,
+      nal_length_size * 8);
+
+  if (nalu_size < 1) {
+    GST_WARNING ("too small nal size %d", nalu_size);
+    return GST_H266_PARSER_BROKEN_DATA;
+  }
+
+  if (size < (gsize) nalu_size + nal_length_size) {
+    GST_WARNING ("larger nalu size %d than data size %" G_GSIZE_FORMAT,
+        nalu_size + nal_length_size, size);
+    return GST_H266_PARSER_BROKEN_DATA;
+  }
+
+  if (consumed)
+    *consumed = nalu_size + nal_length_size;
+
+  off = offset + nal_length_size;
+  remaining = nalu_size;
+  sc_size = nal_length_size;
+
+  /* Drop trailing start-code since it will not be scanned */
+  if (remaining >= 3) {
+    if (data[off + remaining - 1] == 0x01 &&
+        data[off + remaining - 2] == 0x00 &&
+        data[off + remaining - 3] == 0x00) {
+      remaining -= 3;
+      if (remaining > 0 && data[off + remaining - 1] == 0x00)
+        remaining--;
+    }
+  }
+
+  /* Looping to split malformed nal units. nal-length field was dropped above
+   * so expected bitstream structure are:
+   *
+   * <complete nalu>
+   * | nalu |
+   * sc scan result will be -1 and handled in CONDITION-A
+   *
+   * <nalu with startcode prefix>
+   * | SC | nalu |
+   * Hit CONDITION-C first then terminated in CONDITION-A
+   *
+   * <first nal has no startcode but others have>
+   * | nalu | SC | nalu | ...
+   * CONDITION-B handles those cases
+   */
+  do {
+    GstH266NalUnit nalu;
+    gint sc_offset = -1;
+    guint skip_size = 0;
+
+    memset (&nalu, 0, sizeof (GstH266NalUnit));
+    /* startcode 3 bytes + minimum nal size 2 */
+    if (remaining >= 5)
+      sc_offset = scan_for_start_codes (data + off, remaining);
+      //GST_WARNING ("sc_offset: %d, remaining: %u", sc_offset, remaining);
+
+    if (sc_offset < 0) {
+      if (remaining >= 2) {
+        /* CONDITION-A */
+        /* Last chunk */
+        nalu.size = remaining;
+        nalu.sc_offset = off - sc_size;
+        nalu.offset = off;
+        nalu.data = (guint8 *) data;
+        nalu.valid = TRUE;
+
+        gst_h266_parse_nalu_header (&nalu);
+        g_array_append_val (nalus, nalu);
+
+      }
+      break;
+    } else if ((sc_offset == 2 && data[off + sc_offset - 1] != 0)
+        || sc_offset > 2) {
+      /* CONDITION-B */
+      /* Found trailing startcode prefix */
+
+      nalu.size = sc_offset;
+      if (data[off + sc_offset - 1] == 0) {
+        /* 4 bytes start code */
+        nalu.size--;
+      }
+      nalu.sc_offset = off - sc_size;
+      nalu.offset = off;
+      nalu.data = (guint8 *) data;
+      nalu.valid = TRUE;
+
+      gst_h266_parse_nalu_header (&nalu);
+      g_array_append_val (nalus, nalu);
+    } else {
+      /* CONDITION-C */
+      /* startcode located at beginning of this chunk without actual nal data.
+       * skip this start code */
+    }
+    skip_size = sc_offset + 3;
+    if (skip_size >= remaining)
+      break;
+
+    /* no more nal-length bytes but 3bytes startcode */
+    sc_size = 3;
+    if (sc_offset > 0 && data[off + sc_offset - 1] == 0)
+      sc_size++;
+
+    remaining -= skip_size;
+    off += skip_size;
+  } while (remaining >= 2);
+  if (nalus->len > 0)
+    return GST_H266_PARSER_OK;
+
+  GST_WARNING ("No nal found");
+
+  return GST_H266_PARSER_BROKEN_DATA;
+}
+
 /**
  * gst_h266_parser_parse_nal:
  * @parser: a #GstH266Parser
diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gsth266parser.h b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gsth266parser.h
index a53e0ea6153..18f5c06053d 100644
--- a/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gsth266parser.h
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gsth266parser.h
@@ -3469,6 +3469,16 @@ GstH266ParserResult gst_h266_parser_identify_nalu_vvc  (GstH266Parser * parser,
                                                         gsize size,
                                                         guint8 nal_length_size,
                                                         GstH266NalUnit * nalu);
+
+GST_CODEC_PARSERS_API
+GstH266ParserResult gst_h266_parser_identify_and_split_nalu_vvc (GstH266Parser * parser,
+                                                                  const guint8 * data,
+                                                                  guint offset,
+                                                                  gsize size,
+                                                                  guint8 nal_length_size,
+                                                                  GArray * nalus,
+                                                                  gsize * consumed);
+
 GST_CODEC_PARSERS_API
 GstH266ParserResult gst_h266_parser_parse_nal          (GstH266Parser * parser,
                                                         GstH266NalUnit * nalu);
diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/codecs/gsth266decoder.c b/subprojects/gst-plugins-bad/gst-libs/gst/codecs/gsth266decoder.c
index e38e1d3b34c..bec3b42c089 100644
--- a/subprojects/gst-plugins-bad/gst-libs/gst/codecs/gsth266decoder.c
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/codecs/gsth266decoder.c
@@ -91,7 +91,7 @@ struct _GstH266DecoderPrivate
   GstH266FrameFieldInfo ff_info;
 
   GArray *slices;
-
+  GArray *split_nalu;
   gboolean aps_added[GST_H266_APS_TYPE_MAX][8];
 
   /* For delayed output */
@@ -163,6 +163,7 @@ gst_h266_decoder_start (GstVideoDecoder * decoder)
   priv->dpb = gst_h266_dpb_new ();
   priv->new_bitstream_or_got_eos = TRUE;
   priv->last_flow = GST_FLOW_OK;
+  priv->split_nalu = g_array_new (FALSE, FALSE, sizeof (GstH266NalUnit));
 
   return TRUE;
 }
@@ -254,6 +255,72 @@ gst_h266_decoder_format_from_caps (GstH266Decoder * self, GstCaps * caps,
   }
 }
 
+static GstFlowReturn
+gst_h266_decoder_parse_codec_data (GstH266Decoder * self, const guint8 * data,
+    gsize size)
+{
+  GstH266DecoderPrivate *priv = self->priv;
+  GstH266Parser *parser = priv->parser;
+  GstH266ParserResult pres;
+  GstFlowReturn ret = GST_FLOW_ERROR;
+  GstH266VPS vps;
+  GstH266SPS sps;
+  GstH266PPS pps;
+  GstH266DecoderConfigRecord *config = NULL;
+  guint i, j;
+
+  pres = gst_h266_parser_parse_decoder_config_record (parser,
+      data, size, &config);
+  if (pres != GST_H266_PARSER_OK) {
+    GST_WARNING_OBJECT (self, "Failed to parse hvcC data");
+    return GST_FLOW_ERROR;
+  }
+  priv->nal_length_size = config->length_size_minus_one + 1;
+  GST_DEBUG_OBJECT (self, "nal length size %u", priv->nal_length_size);
+
+  for (i = 0; i < config->nalu_array->len; i++) {
+    GstH266DecoderConfigRecordNalUnitArray *array =
+        &g_array_index (config->nalu_array,
+        GstH266DecoderConfigRecordNalUnitArray, i);
+
+    for (j = 0; j < array->nalu->len; j++) {
+      GstH266NalUnit *nalu = &g_array_index (array->nalu, GstH266NalUnit, j);
+
+      switch (nalu->type) {
+        case GST_H266_NAL_VPS:
+          pres = gst_h266_parser_parse_vps (parser, nalu, &vps);
+          if (pres != GST_H266_PARSER_OK) {
+            GST_WARNING_OBJECT (self, "Failed to parse VPS");
+            goto out;
+          }
+          break;
+        case GST_H266_NAL_SPS:
+          pres = gst_h266_parser_parse_sps (parser, nalu, &sps);
+          if (pres != GST_H266_PARSER_OK) {
+            GST_WARNING_OBJECT (self, "Failed to parse SPS");
+            goto out;
+          }
+          break;
+        case GST_H266_NAL_PPS:
+          pres = gst_h266_parser_parse_pps (parser, nalu, &pps);
+          if (pres != GST_H266_PARSER_OK) {
+            GST_WARNING_OBJECT (self, "Failed to parse PPS");
+            goto out;
+          }
+          break;
+        default:
+          break;
+      }
+    }
+  }
+
+  ret = GST_FLOW_OK;
+out:
+  gst_h266_decoder_config_record_free (config);
+  return ret;
+}
+
+
 static gboolean
 gst_h266_decoder_set_format (GstVideoDecoder * decoder,
     GstVideoCodecState * state)
@@ -319,9 +386,16 @@ gst_h266_decoder_set_format (GstVideoDecoder * decoder,
   }
 
   if (state->codec_data) {
-    /* TODO: */
-    GST_WARNING_OBJECT (self, "vvc1 or vvi1 mode is not supported now.");
-    return FALSE;
+    GstMapInfo map;
+
+    gst_buffer_map (state->codec_data, &map, GST_MAP_READ);
+    if (gst_h266_decoder_parse_codec_data (self, map.data, map.size) !=
+        GST_FLOW_OK) {
+      /* keep going without error.
+       * Probably inband SPS/PPS might be valid data */
+      GST_WARNING_OBJECT (self, "Failed to handle codec data");
+    }
+    gst_buffer_unmap (state->codec_data, &map);
   }
 
   return TRUE;
@@ -1514,11 +1588,37 @@ gst_h266_decoder_handle_frame (GstVideoDecoder * decoder,
     return GST_FLOW_ERROR;
   }
 
+  priv->current_frame = frame;
+  priv->last_flow = GST_FLOW_OK;
+
+  gst_buffer_map (in_buf, &map, GST_MAP_READ);
+
   if (priv->in_format == GST_H266_DECODER_FORMAT_VVC1 ||
       priv->in_format == GST_H266_DECODER_FORMAT_VVI1) {
-    gst_buffer_unmap (in_buf, &map);
-    gst_h266_decoder_reset_frame_state (self);
-    return GST_FLOW_NOT_SUPPORTED;
+    guint offset = 0;
+    gsize consumed = 0;
+    guint i;
+
+    do {
+      pres = gst_h266_parser_identify_and_split_nalu_vvc (priv->parser,
+          map.data, offset, map.size, priv->nal_length_size, priv->split_nalu,
+          &consumed);
+      if (pres != GST_H266_PARSER_OK)
+        break;
+
+      for (i = 0; i < priv->split_nalu->len; i++) {
+        GstH266NalUnit *nl =
+            &g_array_index (priv->split_nalu, GstH266NalUnit, i);
+        pres = gst_h266_decoder_parse_nalu (self, nl);
+        if (pres != GST_H266_PARSER_OK)
+          break;
+      }
+
+      if (pres != GST_H266_PARSER_OK)
+        break;
+
+      offset += consumed;
+    } while (pres == GST_H266_PARSER_OK);
   } else {
     pres = gst_h266_parser_identify_nalu (priv->parser,
         map.data, 0, map.size, &nalu);
@@ -1598,6 +1698,7 @@ gst_h266_decoder_finalize (GObject * object)
   gint i;
 
   g_array_unref (priv->slices);
+  g_array_unref (priv->split_nalu);
 
   for (i = 0; i < GST_H266_APS_TYPE_MAX; i++)
     g_array_unref (self->aps_list[i]);
-- 
2.43.0

