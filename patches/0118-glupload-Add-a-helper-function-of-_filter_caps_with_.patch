From fdecca3cbe7f335e30c7a528fd4199a152ec9267 Mon Sep 17 00:00:00 2001
From: He Junyan <junyan.he@intel.com>
Date: Thu, 1 Jun 2023 18:34:31 +0800
Subject: [PATCH 118/127] glupload: Add a helper function of
 _filter_caps_with_features()

We sometimes need to filter some special feature for the next step.
This helper function can help us to filter out un-needed features
in a caps.
---
 .../gst-libs/gst/gl/gstglupload.c             | 97 +++++++++++++++++++
 1 file changed, 97 insertions(+)

diff --git a/subprojects/gst-plugins-base/gst-libs/gst/gl/gstglupload.c b/subprojects/gst-plugins-base/gst-libs/gst/gl/gstglupload.c
index 07ce4ab41b..9556c8a621 100644
--- a/subprojects/gst-plugins-base/gst-libs/gst/gl/gstglupload.c
+++ b/subprojects/gst-plugins-base/gst-libs/gst/gl/gstglupload.c
@@ -117,6 +117,103 @@ struct _GstGLUploadPrivate
 G_DEFINE_TYPE_WITH_CODE (GstGLUpload, gst_gl_upload, GST_TYPE_OBJECT,
     G_ADD_PRIVATE (GstGLUpload) DEBUG_INIT);
 
+static gboolean
+_filter_caps_with_features (const GstCaps * caps,
+    const GstCapsFeatures * features, GstCaps ** ret_caps)
+{
+  guint i, j, n, m;
+  GstCaps *tmp = NULL;
+  GstCapsFeatures *orig_features;
+  GstStructure *structure;
+  gboolean is_system_mem;
+  gboolean ret = FALSE;
+
+  if (gst_caps_is_empty (caps))
+    return FALSE;
+
+  if (ret_caps)
+    tmp = gst_caps_new_empty ();
+
+  if (gst_caps_is_any (caps)) {
+    if (ret_caps) {
+      gst_caps_set_features_simple (tmp, gst_caps_features_copy (features));
+      *ret_caps = tmp;
+    }
+
+    return TRUE;
+  }
+
+  m = gst_caps_features_get_size (features);
+  n = gst_caps_get_size (caps);
+  for (i = 0; i < n; i++) {
+    const gchar *feature;
+
+    orig_features = gst_caps_features_copy (gst_caps_get_features (caps, i));
+
+    /* Something like video/x-raw(meta:GstVideoOverlayComposition)
+       should be considered as the system memory. */
+    is_system_mem = TRUE;
+    for (j = 0; j < gst_caps_features_get_size (orig_features); j++) {
+      feature = gst_caps_features_get_nth (orig_features, j);
+
+      if (!g_strcmp0 (feature, GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY))
+        break;
+
+      if (!strncmp (feature, "memory:", 7)) {
+        is_system_mem = FALSE;
+        break;
+      }
+    }
+
+    if (!gst_caps_features_is_any (orig_features) && is_system_mem)
+      gst_caps_features_add (orig_features,
+          GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY);
+
+    for (j = 0; j < m; j++) {
+      feature = gst_caps_features_get_nth (features, j);
+
+      if (gst_caps_features_is_any (orig_features)) {
+        ret = TRUE;
+        break;
+      }
+
+      if (gst_caps_features_contains (orig_features, feature)) {
+        ret = TRUE;
+        break;
+      }
+    }
+
+    /* No features intersection. */
+    if (j == m) {
+      gst_caps_features_free (orig_features);
+      continue;
+    }
+
+    structure = gst_caps_get_structure (caps, i);
+
+    if (tmp) {
+      gst_caps_append_structure_full (tmp, gst_structure_copy (structure),
+          orig_features);
+    } else {
+      gst_caps_features_free (orig_features);
+    }
+  }
+
+  if (tmp && gst_caps_is_empty (tmp)) {
+    g_assert (ret == FALSE);
+    gst_caps_unref (tmp);
+    tmp = NULL;
+  }
+
+  if (ret_caps) {
+    *ret_caps = tmp;
+  } else {
+    g_assert (tmp == NULL);
+  }
+
+  return ret;
+}
+
 static GstCaps *
 _set_caps_features_with_passthrough (const GstCaps * caps,
     const gchar * feature_name, GstCapsFeatures * passthrough)
-- 
2.25.1

