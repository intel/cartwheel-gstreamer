From 876c65102a499a10d83b7fae5123496365952663 Mon Sep 17 00:00:00 2001
From: He Junyan <junyan.he@intel.com>
Date: Thu, 3 Nov 2022 20:17:23 +0800
Subject: [PATCH 13/13] va: implement jpeg encoder.

And also implement the jpeg bitwriter.
---
 .../gst/codecparsers/gstjpegbitwriter.c       |  503 ++++++++
 .../gst/codecparsers/gstjpegbitwriter.h       |   76 ++
 .../gst-libs/gst/codecparsers/meson.build     |    1 +
 .../gst-plugins-bad/sys/va/gstvabaseenc.c     |    4 +-
 .../gst-plugins-bad/sys/va/gstvaencoder.c     |    9 +-
 .../gst-plugins-bad/sys/va/gstvaencoder.h     |    3 +-
 .../gst-plugins-bad/sys/va/gstvah264enc.c     |    2 +-
 .../gst-plugins-bad/sys/va/gstvah265enc.c     |    2 +-
 .../gst-plugins-bad/sys/va/gstvajpegenc.c     | 1112 +++++++++++++++++
 .../gst-plugins-bad/sys/va/gstvajpegenc.h     |   34 +
 .../gst-plugins-bad/sys/va/gstvavp9enc.c      |    2 +-
 .../gst-plugins-bad/sys/va/meson.build        |    1 +
 subprojects/gst-plugins-bad/sys/va/plugin.c   |    8 +
 .../tests/check/libs/jpegbitwriter.c          |  263 ++++
 .../gst-plugins-bad/tests/check/meson.build   |    1 +
 15 files changed, 2014 insertions(+), 7 deletions(-)
 create mode 100644 subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gstjpegbitwriter.c
 create mode 100644 subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gstjpegbitwriter.h
 create mode 100644 subprojects/gst-plugins-bad/sys/va/gstvajpegenc.c
 create mode 100644 subprojects/gst-plugins-bad/sys/va/gstvajpegenc.h
 create mode 100644 subprojects/gst-plugins-bad/tests/check/libs/jpegbitwriter.c

diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gstjpegbitwriter.c b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gstjpegbitwriter.c
new file mode 100644
index 0000000000..cf5eccabbc
--- /dev/null
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gstjpegbitwriter.c
@@ -0,0 +1,503 @@
+/* GStreamer
+ *  Copyright (C) 2022 Intel Corporation
+ *     Author: He Junyan <junyan.he@intel.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the0
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "gstjpegbitwriter.h"
+#include <gst/base/gstbytewriter.h>
+
+#define WRITE_BYTE_UNCHECK(bw, val)    gst_byte_writer_put_uint8 (bw, val)
+#define WRITE_BYTE(bw, val)                                         \
+  if (!WRITE_BYTE_UNCHECK (bw, val)) {                              \
+    have_space = FALSE;                                             \
+    goto error;                                                     \
+  }
+
+/*****************************  End of Utils ****************************/
+/**
+ * gst_jpeg_bit_writer_frame_header:
+ * @frame_hdr: the frame header of #GstJpegFrameHdr to write
+ * @marker: the #GstJpegMarker id for this segment
+ * @data: (out): the bit stream generated by this frame header
+ * @size: (inout): the size in bytes of the input and output
+ *
+ * Generating the according JPEG bit stream by providing the frame header.
+ *
+ * Returns: a #GstJpegBitWriterResult
+ *
+ * Since: 1.22
+ **/
+GstJpegBitWriterResult
+gst_jpeg_bit_writer_frame_header (const GstJpegFrameHdr * frame_hdr,
+    GstJpegMarker marker, guint8 * data, guint * size)
+{
+  gboolean have_space = TRUE;
+  GstByteWriter bw;
+  guint total_size, value;
+  guint i;
+
+  g_return_val_if_fail (frame_hdr != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (marker >= GST_JPEG_MARKER_SOF_MIN
+      && marker <= GST_JPEG_MARKER_SOF_MAX, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (data != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (size != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (*size > 0, GST_JPEG_BIT_WRITER_ERROR);
+
+  gst_byte_writer_init_with_data (&bw, data, *size, FALSE);
+
+  /* marker */
+  WRITE_BYTE (&bw, 0xff);
+  WRITE_BYTE (&bw, marker);
+
+  total_size = 2;
+
+  if (frame_hdr->num_components > GST_JPEG_MAX_SCAN_COMPONENTS)
+    goto error;
+
+  total_size += (1 + 2 + 2 + 1);
+  for (i = 0; i < frame_hdr->num_components; i++)
+    total_size += (1 + 1 + 1);
+
+  /* S1 and S2 */
+  WRITE_BYTE (&bw, total_size / 256);
+  WRITE_BYTE (&bw, total_size % 256);
+
+  WRITE_BYTE (&bw, frame_hdr->sample_precision);
+
+  if (!gst_byte_writer_put_uint16_be (&bw, frame_hdr->height)) {
+    have_space = FALSE;
+    goto error;
+  }
+  if (!gst_byte_writer_put_uint16_be (&bw, frame_hdr->width)) {
+    have_space = FALSE;
+    goto error;
+  }
+
+  WRITE_BYTE (&bw, frame_hdr->num_components);
+
+  for (i = 0; i < frame_hdr->num_components; i++) {
+    WRITE_BYTE (&bw, frame_hdr->components[i].identifier);
+
+    if (frame_hdr->components[i].horizontal_factor > 4
+        || frame_hdr->components[i].vertical_factor > 4
+        || frame_hdr->components[i].quant_table_selector >= 4)
+      goto error;
+
+    value = (frame_hdr->components[i].horizontal_factor & 0x0F) << 4 |
+        (frame_hdr->components[i].vertical_factor & 0x0F);
+    WRITE_BYTE (&bw, value);
+
+    WRITE_BYTE (&bw, frame_hdr->components[i].quant_table_selector);
+  }
+
+  *size = gst_byte_writer_get_size (&bw);
+  gst_byte_writer_reset (&bw);
+
+  return GST_JPEG_BIT_WRITER_OK;
+
+error:
+  gst_byte_writer_reset (&bw);
+  *size = 0;
+  return have_space ? GST_JPEG_BIT_WRITER_INVALID_DATA :
+      GST_JPEG_BIT_WRITER_NO_MORE_SPACE;
+}
+
+/**
+ * gst_jpeg_bit_writer_scan_header:
+ * @frame_hdr: the scan header of #GstJpegScanHdr to write
+ * @data: (out): the bit stream generated by this scan header
+ * @size: (inout): the size in bytes of the input and output
+ *
+ * Generating the according JPEG bit stream by providing the scan header.
+ *
+ * Returns: a #GstJpegBitWriterResult
+ *
+ * Since: 1.22
+ **/
+GstJpegBitWriterResult
+gst_jpeg_bit_writer_scan_header (const GstJpegScanHdr * scan_hdr,
+    guint8 * data, guint * size)
+{
+  gboolean have_space = TRUE;
+  GstByteWriter bw;
+  guint total_size, value;
+  guint i;
+
+  g_return_val_if_fail (scan_hdr != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (data != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (size != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (*size > 0, GST_JPEG_BIT_WRITER_ERROR);
+
+  gst_byte_writer_init_with_data (&bw, data, *size, FALSE);
+
+  /* marker */
+  WRITE_BYTE (&bw, 0xff);
+  WRITE_BYTE (&bw, GST_JPEG_MARKER_SOS);
+
+  total_size = 2;
+
+  if (scan_hdr->num_components > GST_JPEG_MAX_SCAN_COMPONENTS)
+    goto error;
+
+  total_size += 1;
+  for (i = 0; i < scan_hdr->num_components; i++)
+    total_size += (1 + 1);
+  total_size += 3;
+
+  /* S1 and S2 */
+  WRITE_BYTE (&bw, total_size / 256);
+  WRITE_BYTE (&bw, total_size % 256);
+
+  WRITE_BYTE (&bw, scan_hdr->num_components);
+
+  for (i = 0; i < scan_hdr->num_components; i++) {
+    WRITE_BYTE (&bw, scan_hdr->components[i].component_selector);
+
+    if (scan_hdr->components[i].dc_selector >= 4
+        || scan_hdr->components[i].ac_selector >= 4)
+      goto error;
+
+    value = (scan_hdr->components[i].dc_selector & 0x0F) << 4 |
+        (scan_hdr->components[i].ac_selector & 0x0F);
+    WRITE_BYTE (&bw, value);
+  }
+
+  /* Not use: Ss, Se, Ah, Al */
+  WRITE_BYTE (&bw, 0);
+  WRITE_BYTE (&bw, 0);
+  WRITE_BYTE (&bw, 0);
+
+  *size = gst_byte_writer_get_size (&bw);
+  gst_byte_writer_reset (&bw);
+
+  return GST_JPEG_BIT_WRITER_OK;
+
+error:
+  gst_byte_writer_reset (&bw);
+  *size = 0;
+  return have_space ? GST_JPEG_BIT_WRITER_INVALID_DATA :
+      GST_JPEG_BIT_WRITER_NO_MORE_SPACE;
+}
+
+/**
+ * gst_jpeg_bit_writer_huffman_table:
+ * @huff_tables: the huffman tables of #GstJpegHuffmanTables to write
+ * @data: (out): the bit stream generated by the huffman tables
+ * @size: (inout): the size in bytes of the input and output
+ *
+ * Generating the according JPEG bit stream by providing the huffman tables.
+ *
+ * Returns: a #GstJpegBitWriterResult
+ *
+ * Since: 1.22
+ **/
+GstJpegBitWriterResult
+gst_jpeg_bit_writer_huffman_table (const GstJpegHuffmanTables * huff_tables,
+    guint8 * data, guint * size)
+{
+  gboolean have_space = TRUE;
+  GstByteWriter bw;
+  const GstJpegHuffmanTable *huf_table;
+  guint32 value_count;
+  guint total_size, value;
+  guint i, j, k;
+
+  g_return_val_if_fail (huff_tables != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (data != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (size != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (*size > 0, GST_JPEG_BIT_WRITER_ERROR);
+
+  gst_byte_writer_init_with_data (&bw, data, *size, FALSE);
+
+  /* marker */
+  WRITE_BYTE (&bw, 0xff);
+  WRITE_BYTE (&bw, GST_JPEG_MARKER_DHT);
+
+  total_size = 2;
+
+  for (i = 0; i < GST_JPEG_MAX_SCAN_COMPONENTS; i++) {
+    for (j = 0; j < 2; j++) {   /* DC or AC */
+      huf_table =
+          (j == 0 ? &huff_tables->dc_tables[i] : &huff_tables->ac_tables[i]);
+      if (!huf_table->valid)
+        continue;
+
+      total_size += (1 + 16);
+
+      value_count = 0;
+      for (k = 0; k < 16; k++)
+        value_count += huf_table->huf_bits[k];
+
+      total_size += value_count;
+    }
+  }
+
+  /* S1 and S2 */
+  WRITE_BYTE (&bw, total_size / 256);
+  WRITE_BYTE (&bw, total_size % 256);
+
+  for (i = 0; i < GST_JPEG_MAX_SCAN_COMPONENTS; i++) {
+    for (j = 0; j < 2; j++) {   /* DC or AC */
+      huf_table =
+          (j == 0 ? &huff_tables->dc_tables[i] : &huff_tables->ac_tables[i]);
+      if (!huf_table->valid)
+        continue;
+
+      /* table class and index */
+      value = (j & 0x0F) << 4 | (i & 0x0F);
+      WRITE_BYTE (&bw, value);
+
+      if (!gst_byte_writer_put_data (&bw, huf_table->huf_bits, 16)) {
+        have_space = FALSE;
+        goto error;
+      }
+
+      value_count = 0;
+      for (k = 0; k < 16; k++)
+        value_count += huf_table->huf_bits[k];
+
+      if (!gst_byte_writer_put_data (&bw, huf_table->huf_values, value_count)) {
+        have_space = FALSE;
+        goto error;
+      }
+    }
+  }
+
+  *size = gst_byte_writer_get_size (&bw);
+  gst_byte_writer_reset (&bw);
+
+  return GST_JPEG_BIT_WRITER_OK;
+
+error:
+  gst_byte_writer_reset (&bw);
+  *size = 0;
+  return have_space ? GST_JPEG_BIT_WRITER_INVALID_DATA :
+      GST_JPEG_BIT_WRITER_NO_MORE_SPACE;
+}
+
+/**
+ * gst_jpeg_bit_writer_quantization_table:
+ * @quant_tables: the quantization tables of #GstJpegQuantTables to write
+ * @data: (out): the bit stream generated by the quantization tables
+ * @size: (inout): the size in bytes of the input and output
+ *
+ * Generating the according JPEG bit stream by providing the quantization tables.
+ *
+ * Returns: a #GstJpegBitWriterResult
+ *
+ * Since: 1.22
+ **/
+GstJpegBitWriterResult
+gst_jpeg_bit_writer_quantization_table (const GstJpegQuantTables * quant_tables,
+    guint8 * data, guint * size)
+{
+  gboolean have_space = TRUE;
+  GstByteWriter bw;
+  const GstJpegQuantTable *quant_table;
+  guint total_size, value;
+  guint i, j;
+
+  g_return_val_if_fail (quant_tables != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (data != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (size != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (*size > 0, GST_JPEG_BIT_WRITER_ERROR);
+
+  gst_byte_writer_init_with_data (&bw, data, *size, FALSE);
+
+  /* marker */
+  WRITE_BYTE (&bw, 0xff);
+  WRITE_BYTE (&bw, GST_JPEG_MARKER_DQT);
+
+  total_size = 2;
+
+  for (i = 0; i < GST_JPEG_MAX_SCAN_COMPONENTS; i++) {
+    guint32 element_size;
+
+    quant_table = &quant_tables->quant_tables[i];
+    if (!quant_table->valid)
+      continue;
+
+    element_size = (quant_table->quant_precision == 0) ? 1 : 2;
+    total_size += (1 + GST_JPEG_MAX_QUANT_ELEMENTS * element_size);
+  }
+
+  /* S1 and S2 */
+  WRITE_BYTE (&bw, total_size / 256);
+  WRITE_BYTE (&bw, total_size % 256);
+
+  for (i = 0; i < GST_JPEG_MAX_SCAN_COMPONENTS; i++) {
+    quant_table = &quant_tables->quant_tables[i];
+    if (!quant_table->valid)
+      continue;
+
+    value = ((quant_table->quant_precision & 0x0F) << 4) | (i & 0x0F);
+    WRITE_BYTE (&bw, value);
+
+    for (j = 0; j < GST_JPEG_MAX_QUANT_ELEMENTS; j++) {
+      if (!quant_table->quant_precision) {      /* 8-bit values */
+        guint8 val = quant_table->quant_table[j];
+        WRITE_BYTE (&bw, val);
+      } else {                  /* 16-bit values */
+        if (!gst_byte_writer_put_uint16_be (&bw, quant_table->quant_table[j])) {
+          have_space = FALSE;
+          goto error;
+        }
+      }
+    }
+  }
+
+  *size = gst_byte_writer_get_size (&bw);
+  gst_byte_writer_reset (&bw);
+
+  return GST_JPEG_BIT_WRITER_OK;
+
+error:
+  gst_byte_writer_reset (&bw);
+  *size = 0;
+  return have_space ? GST_JPEG_BIT_WRITER_INVALID_DATA :
+      GST_JPEG_BIT_WRITER_NO_MORE_SPACE;
+}
+
+/**
+ * gst_jpeg_bit_writer_restart_interval:
+ * @interval: the interval value for restart
+ * @data: (out): the bit stream generated by the interval value
+ * @size: (inout): the size in bytes of the input and output
+ *
+ * Generating the according JPEG bit stream by providing the interval value.
+ *
+ * Returns: a #GstJpegBitWriterResult
+ *
+ * Since: 1.22
+ **/
+GstJpegBitWriterResult
+gst_jpeg_bit_writer_restart_interval (guint16 interval, guint8 * data,
+    guint * size)
+{
+  gboolean have_space = TRUE;
+  GstByteWriter bw;
+  guint total_size;
+
+  g_return_val_if_fail (data != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (size != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (*size > 0, GST_JPEG_BIT_WRITER_ERROR);
+
+  gst_byte_writer_init_with_data (&bw, data, *size, FALSE);
+
+  /* marker */
+  WRITE_BYTE (&bw, 0xff);
+  WRITE_BYTE (&bw, GST_JPEG_MARKER_DRI);
+
+  total_size = 2;
+  total_size += 2;
+
+  /* S1 and S2 */
+  WRITE_BYTE (&bw, total_size / 256);
+  WRITE_BYTE (&bw, total_size % 256);
+
+  if (!gst_byte_writer_put_uint16_be (&bw, interval)) {
+    have_space = FALSE;
+    goto error;
+  }
+
+  *size = gst_byte_writer_get_size (&bw);
+  gst_byte_writer_reset (&bw);
+
+  return GST_JPEG_BIT_WRITER_OK;
+
+error:
+  gst_byte_writer_reset (&bw);
+  *size = 0;
+  return have_space ? GST_JPEG_BIT_WRITER_INVALID_DATA :
+      GST_JPEG_BIT_WRITER_NO_MORE_SPACE;
+}
+
+/**
+ * gst_jpeg_bit_writer_segment_with_data:
+ * @marker: the #GstJpegMarker id for this segment
+ * @seg_data: (in) (allow-none): the user provided bit stream data
+ * @seg_size: (in): the size of the segment data
+ * @data: (out): the generated bit stream of this segment
+ * @size: (inout): the size in bytes of the input and output
+ *
+ * Generating the bit stream for a JPEG segment.
+ *
+ * Returns: a #GstJpegBitWriterResult
+ *
+ * Since: 1.22
+ **/
+GstJpegBitWriterResult
+gst_jpeg_bit_writer_segment_with_data (GstJpegMarker marker, guint8 * seg_data,
+    guint seg_size, guint8 * data, guint * size)
+{
+  gboolean have_space = TRUE;
+  GstByteWriter bw;
+  guint total_size;
+
+  g_return_val_if_fail (marker >= GST_JPEG_MARKER_SOF0
+      && marker <= GST_JPEG_MARKER_COM, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (data != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (size != NULL, GST_JPEG_BIT_WRITER_ERROR);
+  g_return_val_if_fail (*size > 0, GST_JPEG_BIT_WRITER_ERROR);
+
+  if (seg_data)
+    g_return_val_if_fail (seg_size > 0, GST_JPEG_BIT_WRITER_ERROR);
+
+  gst_byte_writer_init_with_data (&bw, data, *size, FALSE);
+
+  /* marker */
+  WRITE_BYTE (&bw, 0xff);
+  WRITE_BYTE (&bw, marker);
+
+  if (seg_size > 0) {
+    total_size = 2;
+    total_size += seg_size;
+
+    /* S1 and S2 */
+    WRITE_BYTE (&bw, total_size / 256);
+    WRITE_BYTE (&bw, total_size % 256);
+
+    /* Copy the user provided data. */
+    if (seg_data) {
+      if (!gst_byte_writer_put_data (&bw, seg_data, seg_size)) {
+        have_space = FALSE;
+        goto error;
+      }
+    } else {
+      if (!gst_byte_writer_fill (&bw, 0, seg_size)) {
+        have_space = FALSE;
+        goto error;
+      }
+    }
+  }
+
+  *size = gst_byte_writer_get_size (&bw);
+  gst_byte_writer_reset (&bw);
+
+  return GST_JPEG_BIT_WRITER_OK;
+
+error:
+  gst_byte_writer_reset (&bw);
+  *size = 0;
+  return have_space ? GST_JPEG_BIT_WRITER_INVALID_DATA :
+      GST_JPEG_BIT_WRITER_NO_MORE_SPACE;
+}
diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gstjpegbitwriter.h b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gstjpegbitwriter.h
new file mode 100644
index 0000000000..160d165df3
--- /dev/null
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/gstjpegbitwriter.h
@@ -0,0 +1,76 @@
+/* GStreamer
+ *  Copyright (C) 2021 Intel Corporation
+ *     Author: He Junyan <junyan.he@intel.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the0
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef __GST_JPEG_BIT_WRITER_H__
+#define __GST_JPEG_BIT_WRITER_H__
+
+#include <gst/codecparsers/gstjpegparser.h>
+#include <gst/codecparsers/codecparsers-prelude.h>
+
+G_BEGIN_DECLS
+
+/**
+ * GstJpegBitWriterResult:
+ * @GST_JPEG_BIT_WRITER_OK: The writing succeeded
+ * @GST_JPEG_BIT_WRITER_INVALID_DATA: The input data to write is invalid
+ * @GST_JPEG_BIT_WRITER_NO_MORE_SPACE: The output does not have enough size
+ * @GST_JPEG_BIT_WRITER_ERROR: An general error occurred when writing
+ *
+ * The result of writing JPEG data into bit stream.
+ *
+ * Since: 1.22
+ */
+typedef enum
+{
+  GST_JPEG_BIT_WRITER_OK,
+  GST_JPEG_BIT_WRITER_INVALID_DATA,
+  GST_JPEG_BIT_WRITER_NO_MORE_SPACE,
+  GST_JPEG_BIT_WRITER_ERROR
+} GstJpegBitWriterResult;
+G_END_DECLS
+
+GST_CODEC_PARSERS_API
+GstJpegBitWriterResult     gst_jpeg_bit_writer_frame_header     (const GstJpegFrameHdr * frame_hdr,
+                                                                 GstJpegMarker marker,
+                                                                 guint8 * data,
+                                                                 guint * size);
+GST_CODEC_PARSERS_API
+GstJpegBitWriterResult     gst_jpeg_bit_writer_scan_header      (const GstJpegScanHdr * scan_hdr,
+                                                                 guint8 * data,
+                                                                 guint * size);
+GST_CODEC_PARSERS_API
+GstJpegBitWriterResult     gst_jpeg_bit_writer_huffman_table    (const GstJpegHuffmanTables * huff_tables,
+                                                                 guint8 * data,
+                                                                 guint * size);
+GST_CODEC_PARSERS_API
+GstJpegBitWriterResult     gst_jpeg_bit_writer_quantization_table (const GstJpegQuantTables * quant_tables,
+                                                                   guint8 * data,
+                                                                   guint * size);
+GST_CODEC_PARSERS_API
+GstJpegBitWriterResult     gst_jpeg_bit_writer_restart_interval (guint16 interval,
+                                                                 guint8 * data,
+                                                                 guint * size);
+GST_CODEC_PARSERS_API
+GstJpegBitWriterResult     gst_jpeg_bit_writer_segment_with_data (GstJpegMarker marker,
+                                                                  guint8 * seg_data,
+                                                                  guint seg_size,
+                                                                  guint8 * data,
+                                                                  guint * size);
+#endif /* __GST_JPEG_BIT_WRITER_H__ */
diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/meson.build b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/meson.build
index 94c1a53aa4..b863cfdbb2 100644
--- a/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/meson.build
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/meson.build
@@ -20,6 +20,7 @@ codecparser_sources = files([
   'gsth265bitwriter.c',
   'gstvp9bitwriter.c',
   'gstav1bitwriter.c',
+  'gstjpegbitwriter.c',
 ])
 codecparser_headers = [
   'codecparsers-prelude.h',
diff --git a/subprojects/gst-plugins-bad/sys/va/gstvabaseenc.c b/subprojects/gst-plugins-bad/sys/va/gstvabaseenc.c
index 1008d117cc..f15cb2d612 100644
--- a/subprojects/gst-plugins-bad/sys/va/gstvabaseenc.c
+++ b/subprojects/gst-plugins-bad/sys/va/gstvabaseenc.c
@@ -1147,7 +1147,9 @@ gst_va_base_enc_add_codec_tag (GstVaBaseEnc * base, const gchar * codec_name)
   const gchar *encoder_name;
   guint bitrate = 0;
 
-  g_object_get (venc, "bitrate", &bitrate, NULL);
+  if (g_object_class_find_property (G_OBJECT_GET_CLASS (base), "bitrate"))
+    g_object_get (venc, "bitrate", &bitrate, NULL);
+
   if (bitrate > 0)
     gst_tag_list_add (tags, GST_TAG_MERGE_REPLACE, GST_TAG_NOMINAL_BITRATE,
         bitrate, NULL);
diff --git a/subprojects/gst-plugins-bad/sys/va/gstvaencoder.c b/subprojects/gst-plugins-bad/sys/va/gstvaencoder.c
index 0b980f0ad7..8511c5222c 100644
--- a/subprojects/gst-plugins-bad/sys/va/gstvaencoder.c
+++ b/subprojects/gst-plugins-bad/sys/va/gstvaencoder.c
@@ -337,10 +337,10 @@ gboolean
 gst_va_encoder_open (GstVaEncoder * self, VAProfile profile,
     GstVideoFormat video_format, guint rt_format, gint coded_width,
     gint coded_height, gint codedbuf_size, guint max_reconstruct_surfaces,
-    guint rc_ctrl, guint32 packed_headers)
+    guint rc_ctrl, guint32 packed_headers, VAConfigAttrib * extra_attr)
 {
   /* *INDENT-OFF* */
-  VAConfigAttrib attribs[3] = {
+  VAConfigAttrib attribs[4] = {
     { .type = VAConfigAttribRTFormat, .value = rt_format, },
   };
   /* *INDENT-ON* */
@@ -376,6 +376,11 @@ gst_va_encoder_open (GstVaEncoder * self, VAProfile profile,
     attrib_idx++;
   }
 
+  if (extra_attr) {
+    attribs[attrib_idx] = *extra_attr;
+    attrib_idx++;
+  }
+
   dpy = gst_va_display_get_va_dpy (self->display);
 
   status = vaCreateConfig (dpy, profile, self->entrypoint, attribs, attrib_idx,
diff --git a/subprojects/gst-plugins-bad/sys/va/gstvaencoder.h b/subprojects/gst-plugins-bad/sys/va/gstvaencoder.h
index 44c618431f..48350f44d5 100644
--- a/subprojects/gst-plugins-bad/sys/va/gstvaencoder.h
+++ b/subprojects/gst-plugins-bad/sys/va/gstvaencoder.h
@@ -52,7 +52,8 @@ gboolean              gst_va_encoder_open                 (GstVaEncoder * self,
                                                            gint codedbuf_size,
                                                            guint max_reconstruct_surfaces,
                                                            guint rc_ctrl,
-                                                           guint32 packed_headers);
+                                                           guint32 packed_headers,
+                                                           VAConfigAttrib * extra_attr);
 gboolean              gst_va_encoder_close                (GstVaEncoder * self);
 gboolean              gst_va_encoder_get_reconstruct_pool_config (GstVaEncoder * self,
                                                                   GstCaps ** caps,
diff --git a/subprojects/gst-plugins-bad/sys/va/gstvah264enc.c b/subprojects/gst-plugins-bad/sys/va/gstvah264enc.c
index af1c071ada..8cfec2699b 100644
--- a/subprojects/gst-plugins-bad/sys/va/gstvah264enc.c
+++ b/subprojects/gst-plugins-bad/sys/va/gstvah264enc.c
@@ -1630,7 +1630,7 @@ gst_va_h264_enc_reconfig (GstVaBaseEnc * base)
       && !gst_va_encoder_open (base->encoder, base->profile,
           format, base->rt_format, base->width, base->height,
           base->codedbuf_size, max_ref_frames, self->rc.rc_ctrl_mode,
-          self->packed_headers)) {
+          self->packed_headers, NULL)) {
     GST_ERROR_OBJECT (self, "Failed to open the VA encoder.");
     return FALSE;
   }
diff --git a/subprojects/gst-plugins-bad/sys/va/gstvah265enc.c b/subprojects/gst-plugins-bad/sys/va/gstvah265enc.c
index d2462250b8..96bef8e274 100644
--- a/subprojects/gst-plugins-bad/sys/va/gstvah265enc.c
+++ b/subprojects/gst-plugins-bad/sys/va/gstvah265enc.c
@@ -4567,7 +4567,7 @@ gst_va_h265_enc_reconfig (GstVaBaseEnc * base)
       && !gst_va_encoder_open (base->encoder, base->profile,
           format, base->rt_format, self->luma_width, self->luma_height,
           base->codedbuf_size, max_ref_frames, self->rc.rc_ctrl_mode,
-          self->packed_headers)) {
+          self->packed_headers, NULL)) {
     GST_ERROR_OBJECT (self, "Failed to open the VA encoder.");
     return FALSE;
   }
diff --git a/subprojects/gst-plugins-bad/sys/va/gstvajpegenc.c b/subprojects/gst-plugins-bad/sys/va/gstvajpegenc.c
new file mode 100644
index 0000000000..80da6e1312
--- /dev/null
+++ b/subprojects/gst-plugins-bad/sys/va/gstvajpegenc.c
@@ -0,0 +1,1112 @@
+/* GStreamer
+ *  Copyright (C) 2022 Intel Corporation
+ *     Author: He Junyan <junyan.he@intel.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+/**
+ * SECTION:element-vajpegenc
+ * @title: vajpegenc
+ * @short_description: A VA-API based JPEG video encoder
+ *
+ * vajpegenc encodes raw video VA surfaces into JPEG bitstreams using
+ * the installed and chosen [VA-API](https://01.org/linuxmedia/vaapi)
+ * driver.
+ *
+ * The raw video frames in main memory can be imported into VA surfaces.
+ *
+ * ## Example launch line
+ * ```
+ * gst-launch-1.0 videotestsrc num-buffers=60 ! timeoverlay ! vajpegenc ! jpegparse ! filesink location=test.mjpeg
+ * ```
+ *
+ * Since: 1.24
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "gstvajpegenc.h"
+
+#include <gst/codecparsers/gstjpegbitwriter.h>
+#include <gst/va/gstva.h>
+#include <gst/va/gstvavideoformat.h>
+#include <gst/video/video.h>
+#include <va/va_drmcommon.h>
+
+#include "vacompat.h"
+#include "gstvabaseenc.h"
+#include "gstvaencoder.h"
+#include "gstvacaps.h"
+#include "gstvaprofile.h"
+#include "gstvadisplay_priv.h"
+
+GST_DEBUG_CATEGORY_STATIC (gst_va_jpegenc_debug);
+#define GST_CAT_DEFAULT gst_va_jpegenc_debug
+
+#define GST_VA_JPEG_ENC(obj)            ((GstVaJpegEnc *) obj)
+#define GST_VA_JPEG_ENC_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), G_TYPE_FROM_INSTANCE (obj), GstVaJpegEncClass))
+#define GST_VA_JPEG_ENC_CLASS(klass)    ((GstVaJpegEncClass *) klass)
+
+typedef struct _GstVaJpegEnc GstVaJpegEnc;
+typedef struct _GstVaJpegEncClass GstVaJpegEncClass;
+typedef struct _GstVaJpegEncFrame GstVaJpegEncFrame;
+
+enum
+{
+  PROP_QUALITY = 1,
+  N_PROPERTIES
+};
+
+static GParamSpec *properties[N_PROPERTIES];
+
+static GstElementClass *parent_class = NULL;
+
+/* Maximum sizes for common segment (in bytes) */
+#define MAX_APP_HDR_SIZE 20
+#define MAX_FRAME_HDR_SIZE 19
+#define MAX_QUANT_TABLE_SIZE 138
+#define MAX_HUFFMAN_TABLE_SIZE 432
+#define MAX_SCAN_HDR_SIZE 14
+
+struct _GstVaJpegEncClass
+{
+  GstVaBaseEncClass parent_class;
+};
+
+struct _GstVaJpegEnc
+{
+  /*< private > */
+  GstVaBaseEnc parent;
+
+  /* properties */
+  struct
+  {
+    guint32 quality;
+  } prop;
+
+  /* JPEG fields */
+  guint32 quality;
+
+  GstVideoFormat input_format;
+  guint32 packed_headers;
+
+  gint cwidth[GST_VIDEO_MAX_COMPONENTS];
+  gint cheight[GST_VIDEO_MAX_COMPONENTS];
+  gint h_samp[GST_VIDEO_MAX_COMPONENTS];
+  gint v_samp[GST_VIDEO_MAX_COMPONENTS];
+  gint h_max_samp;
+  gint v_max_samp;
+  guint n_components;
+  GstJpegQuantTables quant_tables;
+  GstJpegQuantTables scaled_quant_tables;
+  gboolean has_quant_tables;
+  GstJpegHuffmanTables huff_tables;
+  gboolean has_huff_tables;
+};
+
+struct _GstVaJpegEncFrame
+{
+  GstVaEncodePicture *picture;
+
+  /* The total frame count we handled. */
+  guint total_frame_count;
+};
+
+static GstVaJpegEncFrame *
+gst_va_jpeg_enc_frame_new (void)
+{
+  GstVaJpegEncFrame *frame;
+
+  frame = g_slice_new (GstVaJpegEncFrame);
+  frame->total_frame_count = 0;
+  frame->picture = NULL;
+
+  return frame;
+}
+
+static void
+gst_va_jpeg_enc_frame_free (gpointer pframe)
+{
+  GstVaJpegEncFrame *frame = pframe;
+  g_clear_pointer (&frame->picture, gst_va_encode_picture_free);
+  g_slice_free (GstVaJpegEncFrame, frame);
+}
+
+static gboolean
+gst_va_jpeg_enc_new_frame (GstVaBaseEnc * base, GstVideoCodecFrame * frame)
+{
+  GstVaJpegEncFrame *frame_in;
+
+  frame_in = gst_va_jpeg_enc_frame_new ();
+  frame_in->total_frame_count = base->input_frame_count++;
+  gst_video_codec_frame_set_user_data (frame, frame_in,
+      gst_va_jpeg_enc_frame_free);
+
+  return TRUE;
+}
+
+static inline GstVaJpegEncFrame *
+_enc_frame (GstVideoCodecFrame * frame)
+{
+  GstVaJpegEncFrame *enc_frame = gst_video_codec_frame_get_user_data (frame);
+  g_assert (enc_frame);
+  return enc_frame;
+}
+
+static gboolean
+_ensure_profile (GstVaJpegEnc * self)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+
+  if (!gst_va_encoder_has_profile (base->encoder, VAProfileJPEGBaseline)) {
+    GST_ERROR_OBJECT (self, "No jpeg profile found");
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+static void
+_jpeg_generate_sampling_factors (GstVaJpegEnc * self)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+  const GstVideoInfo *vinfo;
+  gint i;
+
+  vinfo = &base->input_state->info;
+
+  if (GST_VIDEO_INFO_FORMAT (vinfo) == GST_VIDEO_FORMAT_ENCODED) {
+    /* Use native I420 format */
+    self->n_components = 3;
+    for (i = 0; i < self->n_components; ++i) {
+      if (i == 0)
+        self->h_samp[i] = self->v_samp[i] = 2;
+      else
+        self->h_samp[i] = self->v_samp[i] = 1;
+      GST_INFO_OBJECT (self, "sampling factors: %d %d", self->h_samp[i],
+          self->v_samp[i]);
+    }
+
+    return;
+  }
+
+  self->n_components = GST_VIDEO_INFO_N_COMPONENTS (vinfo);
+
+  self->h_max_samp = 0;
+  self->v_max_samp = 0;
+  for (i = 0; i < self->n_components; ++i) {
+    self->cwidth[i] = GST_VIDEO_INFO_COMP_WIDTH (vinfo, i);
+    self->cheight[i] = GST_VIDEO_INFO_COMP_HEIGHT (vinfo, i);
+    self->h_samp[i] =
+        GST_ROUND_UP_4 (GST_VIDEO_INFO_WIDTH (vinfo)) / self->cwidth[i];
+    self->h_max_samp = MAX (self->h_max_samp, self->h_samp[i]);
+    self->v_samp[i] =
+        GST_ROUND_UP_4 (GST_VIDEO_INFO_HEIGHT (vinfo)) / self->cheight[i];
+    self->v_max_samp = MAX (self->v_max_samp, self->v_samp[i]);
+  }
+  /* samp should only be 1, 2 or 4 */
+  g_assert (self->h_max_samp <= 4);
+  g_assert (self->v_max_samp <= 4);
+
+  /* now invert */
+  /* maximum is invariant, as one of the components should have samp 1 */
+  for (i = 0; i < self->n_components; ++i) {
+    self->h_samp[i] = self->h_max_samp / self->h_samp[i];
+    self->v_samp[i] = self->v_max_samp / self->v_samp[i];
+    GST_DEBUG_OBJECT (self, "sampling factors: %d %d", self->h_samp[i],
+        self->v_samp[i]);
+  }
+}
+
+static void
+_jpeg_calculate_coded_size (GstVaJpegEnc * self)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+  guint codedbuf_size = 0;
+
+  /* Only YUV 4:2:0 formats are supported for now. */
+  codedbuf_size = GST_ROUND_UP_16 (base->width) *
+      GST_ROUND_UP_16 (base->height) * 3 / 2;
+
+  codedbuf_size += MAX_APP_HDR_SIZE + MAX_FRAME_HDR_SIZE +
+      MAX_QUANT_TABLE_SIZE + MAX_HUFFMAN_TABLE_SIZE + MAX_SCAN_HDR_SIZE;
+
+  base->codedbuf_size = codedbuf_size;
+  GST_DEBUG_OBJECT (self, "Calculate codedbuf size: %u", base->codedbuf_size);
+}
+
+static gboolean
+_jpeg_init_packed_headers (GstVaJpegEnc * self)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+  guint32 packed_headers;
+  /* JPEG segments info */
+  guint32 desired_packed_headers = VA_ENC_PACKED_HEADER_RAW_DATA;
+
+  self->packed_headers = 0;
+
+  if (!gst_va_encoder_get_packed_headers (base->encoder, base->profile,
+          GST_VA_BASE_ENC_ENTRYPOINT (base), &packed_headers))
+    return FALSE;
+
+  if (desired_packed_headers & ~packed_headers) {
+    GST_INFO_OBJECT (self, "Driver does not support some wanted packed headers "
+        "(wanted %#x, found %#x)", desired_packed_headers, packed_headers);
+  }
+
+  self->packed_headers = desired_packed_headers & packed_headers;
+
+  return TRUE;
+}
+
+static uint32_t
+_jpeg_get_capability_attribute (GstVaJpegEnc * self)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+
+  VAStatus status;
+  VAConfigAttrib attrib = {.type = VAConfigAttribEncJPEG };
+
+  status = vaGetConfigAttributes (gst_va_display_get_va_dpy (base->display),
+      base->profile, GST_VA_BASE_ENC_ENTRYPOINT (base), &attrib, 1);
+  if (status != VA_STATUS_SUCCESS) {
+    GST_INFO_OBJECT (self, "Failed to query encoding features: %s",
+        vaErrorStr (status));
+    return 0;
+  }
+
+  return attrib.value;
+}
+
+static gboolean
+gst_va_jpeg_enc_reconfig (GstVaBaseEnc * base)
+{
+  GstVideoEncoder *venc = GST_VIDEO_ENCODER (base);
+  GstVaJpegEnc *self = GST_VA_JPEG_ENC (base);
+  GstVideoCodecState *output_state = NULL;
+  gboolean do_renegotiation = TRUE, do_reopen, need_negotiation;
+  gint width, height;
+  GstVideoFormat format;
+  guint rt_format = 0, codedbuf_size;
+  GstCaps *out_caps;
+  VAConfigAttrib jpeg_attr;
+
+  width = GST_VIDEO_INFO_WIDTH (&base->input_state->info);
+  height = GST_VIDEO_INFO_HEIGHT (&base->input_state->info);
+  format = GST_VIDEO_INFO_FORMAT (&base->input_state->info);
+  codedbuf_size = base->codedbuf_size;
+
+  need_negotiation = (base->profile != VAProfileNone);
+
+  if (!_ensure_profile (self))
+    return FALSE;
+
+  rt_format = gst_va_chroma_from_video_format (format);
+
+  /* first check */
+  do_reopen = !(base->rt_format == rt_format && self->input_format == format
+      && width == base->width && height == base->height);
+
+  if (do_reopen && gst_va_encoder_is_open (base->encoder))
+    gst_va_encoder_close (base->encoder);
+
+  gst_va_base_enc_reset_state (base);
+
+  base->profile = VAProfileJPEGBaseline;
+  base->rt_format = rt_format;
+  base->width = width;
+  base->height = height;
+  self->input_format = format;
+
+  /* Frame rate is needed for rate control and PTS setting. */
+  if (GST_VIDEO_INFO_FPS_N (&base->input_state->info) == 0
+      || GST_VIDEO_INFO_FPS_D (&base->input_state->info) == 0) {
+    GST_INFO_OBJECT (self, "Unknown framerate, just set to 30 fps");
+    GST_VIDEO_INFO_FPS_N (&base->input_state->info) = 30;
+    GST_VIDEO_INFO_FPS_D (&base->input_state->info) = 1;
+  }
+  base->frame_duration = gst_util_uint64_scale (GST_SECOND,
+      GST_VIDEO_INFO_FPS_D (&base->input_state->info),
+      GST_VIDEO_INFO_FPS_N (&base->input_state->info));
+
+  GST_DEBUG_OBJECT (self, "resolution:%dx%d, frame duration is %"
+      GST_TIME_FORMAT, base->width, base->height,
+      GST_TIME_ARGS (base->frame_duration));
+
+  _jpeg_generate_sampling_factors (self);
+
+  _jpeg_calculate_coded_size (self);
+
+  if (!_jpeg_init_packed_headers (self))
+    return FALSE;
+
+  /* second check after calculations */
+  do_reopen |= (codedbuf_size != base->codedbuf_size);
+  if (do_reopen && gst_va_encoder_is_open (base->encoder))
+    gst_va_encoder_close (base->encoder);
+
+  jpeg_attr.type = VAConfigAttribEncJPEG;
+  jpeg_attr.value = _jpeg_get_capability_attribute (self);
+
+  if (!gst_va_encoder_is_open (base->encoder)
+      && !gst_va_encoder_open (base->encoder, base->profile,
+          format, base->rt_format, base->width, base->height,
+          base->codedbuf_size, 1, VA_RC_NONE,
+          self->packed_headers, &jpeg_attr)) {
+    GST_ERROR_OBJECT (self, "Failed to open the VA encoder.");
+    return FALSE;
+  }
+
+  /* Add some tags */
+  gst_va_base_enc_add_codec_tag (base, "JPEG");
+
+  out_caps = gst_va_profile_caps (base->profile);
+  g_assert (out_caps);
+  out_caps = gst_caps_fixate (out_caps);
+
+  gst_caps_set_simple (out_caps, "width", G_TYPE_INT, base->width,
+      "height", G_TYPE_INT, base->height, NULL);
+
+  if (!need_negotiation) {
+    output_state = gst_video_encoder_get_output_state (venc);
+    do_renegotiation = TRUE;
+    if (output_state) {
+      do_renegotiation = !gst_caps_is_subset (output_state->caps, out_caps);
+      gst_video_codec_state_unref (output_state);
+    }
+    if (!do_renegotiation) {
+      gst_caps_unref (out_caps);
+      return TRUE;
+    }
+  }
+
+  GST_DEBUG_OBJECT (self, "output caps is %" GST_PTR_FORMAT, out_caps);
+
+  output_state =
+      gst_video_encoder_set_output_state (venc, out_caps, base->input_state);
+  gst_video_codec_state_unref (output_state);
+
+  if (!gst_video_encoder_negotiate (venc)) {
+    GST_ERROR_OBJECT (self, "Failed to negotiate with the downstream");
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+static gboolean
+gst_va_jpeg_enc_reorder_frame (GstVaBaseEnc * base, GstVideoCodecFrame * frame,
+    gboolean bump_all, GstVideoCodecFrame ** out_frame)
+{
+  *out_frame = frame;
+  return TRUE;
+}
+
+static void
+gst_va_jpeg_enc_reset_state (GstVaBaseEnc * base)
+{
+  GstVaJpegEnc *self = GST_VA_JPEG_ENC (base);
+
+  GST_VA_BASE_ENC_CLASS (parent_class)->reset_state (base);
+
+  GST_OBJECT_LOCK (self);
+
+  self->quality = self->prop.quality;
+
+  GST_OBJECT_UNLOCK (self);
+
+  self->input_format = GST_VIDEO_FORMAT_UNKNOWN;
+  self->packed_headers = 0;
+  memset (self->cwidth, 0, sizeof (self->cwidth));
+  memset (self->cheight, 0, sizeof (self->cheight));
+  memset (self->h_samp, 0, sizeof (self->h_samp));
+  memset (self->v_samp, 0, sizeof (self->v_samp));
+  self->h_max_samp = 0;
+  self->v_max_samp = 0;
+  self->n_components = 0;
+  memset (&self->quant_tables, 0, sizeof (GstJpegQuantTables));
+  memset (&self->scaled_quant_tables, 0, sizeof (GstJpegQuantTables));
+  self->has_quant_tables = FALSE;
+  memset (&self->huff_tables, 0, sizeof (GstJpegHuffmanTables));
+  self->has_huff_tables = FALSE;
+}
+
+static void
+_jpeg_fill_picture (GstVaJpegEnc * self, GstVaJpegEncFrame * frame,
+    VAEncPictureParameterBufferJPEG * pic_param)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+  guint i;
+
+  /* *INDENT-OFF* */
+  *pic_param = (VAEncPictureParameterBufferJPEG) {
+    .reconstructed_picture =
+        gst_va_encode_picture_get_reconstruct_surface (frame->picture),
+    .picture_width = base->width,
+    .picture_height = base->height,
+    .coded_buf = frame->picture->coded_buffer,
+    /* Profile = Baseline */
+    .pic_flags.bits.profile = 0,
+    /* Sequential encoding */
+    .pic_flags.bits.progressive = 0,
+    /* Uses Huffman coding */
+    .pic_flags.bits.huffman = 1,
+    /* Input format is non interleaved (YUV) */
+    .pic_flags.bits.interleaved = 0,
+    /* non-Differential Encoding */
+    .pic_flags.bits.differential = 0,
+    .sample_bit_depth = 8,
+    .num_scan = 1,
+    .num_components = self->n_components,
+    .quality = self->quality,
+  };
+  /* *INDENT-ON* */
+
+  for (i = 0; i < pic_param->num_components; i++) {
+    pic_param->component_id[i] = i + 1;
+    if (i != 0)
+      pic_param->quantiser_table_selector[i] = 1;
+  }
+}
+
+static gboolean
+_jpeg_add_picture_parameter (GstVaJpegEnc * self, GstVaJpegEncFrame * frame,
+    VAEncPictureParameterBufferJPEG * pic_param)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+
+  if (!gst_va_encoder_add_param (base->encoder, frame->picture,
+          VAEncPictureParameterBufferType, pic_param,
+          sizeof (VAEncPictureParameterBufferJPEG))) {
+    GST_ERROR_OBJECT (self, "Failed to create the picture parameter");
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+/* This is a work-around: Normalize the quality factor and scale QM
+ * values similar to what VA-Intel driver is doing. Otherwise the
+ * generated packed headers will be wrong, since the driver itself
+ * is scaling the QM values using the normalized quality factor */
+static void
+_jpeg_generate_scaled_qm (GstJpegQuantTables * quant_tables,
+    GstJpegQuantTables * scaled_quant_tables, guint quality, guint shift)
+{
+  guint qt_val, nm_quality, i;
+
+  nm_quality = quality == 0 ? 1 : quality;
+  nm_quality =
+      (nm_quality < 50) ? (5000 / nm_quality) : (200 - (nm_quality * 2));
+
+  g_assert (quant_tables != NULL);
+  g_assert (scaled_quant_tables != NULL);
+
+  scaled_quant_tables->quant_tables[0].quant_precision =
+      quant_tables->quant_tables[0].quant_precision;
+  scaled_quant_tables->quant_tables[0].valid =
+      quant_tables->quant_tables[0].valid;
+  scaled_quant_tables->quant_tables[1].quant_precision =
+      quant_tables->quant_tables[1].quant_precision;
+  scaled_quant_tables->quant_tables[1].valid =
+      quant_tables->quant_tables[1].valid;
+
+  for (i = 0; i < GST_JPEG_MAX_QUANT_ELEMENTS; i++) {
+    /* Luma QM */
+    qt_val =
+        (quant_tables->quant_tables[0].quant_table[i] * nm_quality +
+        shift) / 100;
+    scaled_quant_tables->quant_tables[0].quant_table[i] =
+        CLAMP (qt_val, 1, 255);
+    /* Chroma QM */
+    qt_val =
+        (quant_tables->quant_tables[1].quant_table[i] * nm_quality +
+        shift) / 100;
+    scaled_quant_tables->quant_tables[1].quant_table[i] =
+        CLAMP (qt_val, 1, 255);
+  }
+}
+
+static void
+_jpeg_fill_quantization_table (GstVaJpegEnc * self,
+    VAQMatrixBufferJPEG * q_matrix)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+  guint i;
+
+  if (!self->has_quant_tables) {
+    guint shift = 0;
+
+    if (gst_va_display_is_implementation (base->display,
+            GST_VA_IMPLEMENTATION_INTEL_IHD))
+      shift = 50;
+
+    gst_jpeg_get_default_quantization_tables (&self->quant_tables);
+    /* Just use table 0 and 1 */
+    self->quant_tables.quant_tables[2].valid = FALSE;
+    self->quant_tables.quant_tables[3].valid = FALSE;
+
+    _jpeg_generate_scaled_qm (&self->quant_tables, &self->scaled_quant_tables,
+        self->quality, shift);
+
+    self->has_quant_tables = TRUE;
+  }
+
+  q_matrix->load_lum_quantiser_matrix = 1;
+  for (i = 0; i < GST_JPEG_MAX_QUANT_ELEMENTS; i++) {
+    q_matrix->lum_quantiser_matrix[i] =
+        self->quant_tables.quant_tables[0].quant_table[i];
+  }
+
+  q_matrix->load_chroma_quantiser_matrix = 1;
+  for (i = 0; i < GST_JPEG_MAX_QUANT_ELEMENTS; i++) {
+    q_matrix->chroma_quantiser_matrix[i] =
+        self->quant_tables.quant_tables[1].quant_table[i];
+  }
+}
+
+static gboolean
+_jpeg_add_quantization_table (GstVaJpegEnc * self, GstVaJpegEncFrame * frame,
+    VAQMatrixBufferJPEG * q_matrix)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+
+  if (!gst_va_encoder_add_param (base->encoder, frame->picture,
+          VAQMatrixBufferType, q_matrix, sizeof (VAQMatrixBufferJPEG))) {
+    GST_ERROR_OBJECT (self, "Failed to create the quantization table");
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+static void
+_jpeg_fill_huffman_table (GstVaJpegEnc * self,
+    VAHuffmanTableBufferJPEGBaseline * huffman_table)
+{
+  guint i, num_tables;
+
+  num_tables = MIN (G_N_ELEMENTS (huffman_table->huffman_table),
+      GST_JPEG_MAX_SCAN_COMPONENTS);
+
+  if (!self->has_huff_tables) {
+    gst_jpeg_get_default_huffman_tables (&self->huff_tables);
+    self->has_huff_tables = TRUE;
+  }
+
+  for (i = 0; i < num_tables; i++) {
+    huffman_table->load_huffman_table[i] =
+        self->huff_tables.dc_tables[i].valid
+        && self->huff_tables.ac_tables[i].valid;
+    if (!huffman_table->load_huffman_table[i])
+      continue;
+
+    memcpy (huffman_table->huffman_table[i].num_dc_codes,
+        self->huff_tables.dc_tables[i].huf_bits,
+        sizeof (huffman_table->huffman_table[i].num_dc_codes));
+    memcpy (huffman_table->huffman_table[i].dc_values,
+        self->huff_tables.dc_tables[i].huf_values,
+        sizeof (huffman_table->huffman_table[i].dc_values));
+    memcpy (huffman_table->huffman_table[i].num_ac_codes,
+        self->huff_tables.ac_tables[i].huf_bits,
+        sizeof (huffman_table->huffman_table[i].num_ac_codes));
+    memcpy (huffman_table->huffman_table[i].ac_values,
+        self->huff_tables.ac_tables[i].huf_values,
+        sizeof (huffman_table->huffman_table[i].ac_values));
+    memset (huffman_table->huffman_table[i].pad,
+        0, sizeof (huffman_table->huffman_table[i].pad));
+  }
+}
+
+static gboolean
+_jpeg_add_huffman_table (GstVaJpegEnc * self, GstVaJpegEncFrame * frame,
+    VAHuffmanTableBufferJPEGBaseline * huffman_table)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+
+  if (!gst_va_encoder_add_param (base->encoder, frame->picture,
+          VAHuffmanTableBufferType, huffman_table,
+          sizeof (VAHuffmanTableBufferJPEGBaseline))) {
+    GST_ERROR_OBJECT (self, "Failed to create the huffman table");
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+static void
+_jpeg_fill_slice (GstVaJpegEnc * self,
+    VAEncPictureParameterBufferJPEG * pic_param,
+    VAEncSliceParameterBufferJPEG * slice_param)
+{
+  /* *INDENT-OFF* */
+  *slice_param = (VAEncSliceParameterBufferJPEG) {
+    .restart_interval = 0,
+    .num_components = pic_param->num_components,
+    .components[0].component_selector = 1,
+    .components[0].dc_table_selector = 0,
+    .components[0].ac_table_selector = 0,
+    .components[1].component_selector = 2,
+    .components[1].dc_table_selector = 1,
+    .components[1].ac_table_selector = 1,
+    .components[2].component_selector = 3,
+    .components[2].dc_table_selector = 1,
+    .components[2].ac_table_selector = 1,
+  };
+  /* *INDENT-ON* */
+}
+
+static gboolean
+_jpeg_add_slice_parameter (GstVaJpegEnc * self, GstVaJpegEncFrame * frame,
+    VAEncSliceParameterBufferJPEG * slice_param)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+
+  if (!gst_va_encoder_add_param (base->encoder, frame->picture,
+          VAEncSliceParameterBufferType, slice_param,
+          sizeof (VAEncSliceParameterBufferJPEG))) {
+    GST_ERROR_OBJECT (self, "Failed to create the slice parameter");
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+static gboolean
+_jpeg_create_and_add_packed_segments (GstVaJpegEnc * self,
+    GstVaJpegEncFrame * frame, VAEncPictureParameterBufferJPEG * pic_param,
+    VAEncSliceParameterBufferJPEG * slice_param)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+  GstJpegBitWriterResult writer_res;
+  guint8 data[2048] = { 0, };
+  guint8 app_data[14] = {
+    0x4A /* J */ ,
+    0x46 /* F */ ,
+    0x49 /* I */ ,
+    0x46 /* F */ ,
+    0x00 /* 0 */ ,
+    0x01 /* Major Version */ ,
+    0x02 /* Minor Version */ ,
+    0x00 /* Density units 0:no units, 1:pixels per inch, 2: pixels per cm */ ,
+    0x00, 0x01 /* X density (pixel-aspect-ratio) */ ,
+    0x00, 0x01 /* Y density (pixel-aspect-ratio) */ ,
+    0x00 /* Thumbnail width */ ,
+    0x00 /* Thumbnail height */ ,
+  };
+  GstJpegFrameHdr frame_hdr;
+  GstJpegScanHdr scan_hdr = { 0, };
+  guint i;
+  guint size, offset;
+
+  /* SOI */
+  offset = 0;
+  size = sizeof (data);
+  writer_res = gst_jpeg_bit_writer_segment_with_data (GST_JPEG_MARKER_SOI,
+      NULL, 0, data, &size);
+  if (writer_res != GST_JPEG_BIT_WRITER_OK)
+    return FALSE;
+
+  /* APP0 */
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_segment_with_data (GST_JPEG_MARKER_APP_MIN,
+      app_data, sizeof (app_data), data + offset, &size);
+  if (writer_res != GST_JPEG_BIT_WRITER_OK)
+    return FALSE;
+
+  /* Quantization tables */
+  g_assert (self->has_quant_tables);
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res =
+      gst_jpeg_bit_writer_quantization_table (&self->scaled_quant_tables,
+      data + offset, &size);
+  if (writer_res != GST_JPEG_BIT_WRITER_OK)
+    return FALSE;
+
+  /* SOF */
+  /* *INDENT-OFF* */
+  frame_hdr = (GstJpegFrameHdr) {
+    .sample_precision = 8,
+    .width = pic_param->picture_width,
+    .height = pic_param->picture_height,
+    .num_components = pic_param->num_components,
+  };
+  /* *INDENT-ON* */
+  for (i = 0; i < frame_hdr.num_components; i++) {
+    frame_hdr.components[i].identifier = pic_param->component_id[i];
+    frame_hdr.components[i].horizontal_factor = self->h_samp[i];
+    frame_hdr.components[i].vertical_factor = self->v_samp[i];
+    frame_hdr.components[i].quant_table_selector =
+        pic_param->quantiser_table_selector[i];
+  };
+
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_frame_header (&frame_hdr,
+      GST_JPEG_MARKER_SOF_MIN, data + offset, &size);
+  if (writer_res != GST_JPEG_BIT_WRITER_OK)
+    return FALSE;
+
+  /* huffman tables */
+  g_assert (self->has_huff_tables);
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_huffman_table (&self->huff_tables,
+      data + offset, &size);
+  if (writer_res != GST_JPEG_BIT_WRITER_OK)
+    return FALSE;
+
+  /* Scan header */
+  scan_hdr.num_components = slice_param->num_components;
+  for (i = 0; i < frame_hdr.num_components; i++) {
+    scan_hdr.components[i].component_selector =
+        slice_param->components[i].component_selector;
+    scan_hdr.components[i].dc_selector =
+        slice_param->components[i].dc_table_selector;
+    scan_hdr.components[i].ac_selector =
+        slice_param->components[i].ac_table_selector;
+  }
+
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_scan_header (&scan_hdr,
+      data + offset, &size);
+  if (writer_res != GST_JPEG_BIT_WRITER_OK)
+    return FALSE;
+
+  offset += size;
+
+  if (!gst_va_encoder_add_packed_header (base->encoder, frame->picture,
+          VAEncPackedHeaderRawData, data, offset * 8, FALSE)) {
+    GST_ERROR_OBJECT (self, "Failed to add packed segment data");
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+static gboolean
+_jpeg_encode_one_frame (GstVaJpegEnc * self, GstVideoCodecFrame * gst_frame)
+{
+  GstVaBaseEnc *base = GST_VA_BASE_ENC (self);
+  GstVaJpegEncFrame *frame;
+  VAEncPictureParameterBufferJPEG pic_param;
+  VAQMatrixBufferJPEG q_matrix;
+  VAHuffmanTableBufferJPEGBaseline huffman_table;
+  VAEncSliceParameterBufferJPEG slice_param;
+
+  g_return_val_if_fail (gst_frame, FALSE);
+
+  frame = _enc_frame (gst_frame);
+
+  _jpeg_fill_quantization_table (self, &q_matrix);
+  if (!_jpeg_add_quantization_table (self, frame, &q_matrix))
+    return FALSE;
+
+  _jpeg_fill_huffman_table (self, &huffman_table);
+  if (!_jpeg_add_huffman_table (self, frame, &huffman_table))
+    return FALSE;
+
+  _jpeg_fill_picture (self, frame, &pic_param);
+  if (!_jpeg_add_picture_parameter (self, frame, &pic_param))
+    return FALSE;
+
+  _jpeg_fill_slice (self, &pic_param, &slice_param);
+  if (!_jpeg_add_slice_parameter (self, frame, &slice_param))
+    return FALSE;
+
+  if (!_jpeg_create_and_add_packed_segments (self, frame, &pic_param,
+          &slice_param)) {
+    GST_ERROR_OBJECT (self, "Failed to create packed segments");
+    return FALSE;
+  }
+
+  if (!gst_va_encoder_encode (base->encoder, frame->picture)) {
+    GST_ERROR_OBJECT (self, "Encode frame error");
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+static GstFlowReturn
+gst_va_jpeg_enc_encode_frame (GstVaBaseEnc * base,
+    GstVideoCodecFrame * gst_frame, gboolean is_last)
+{
+  GstVaJpegEnc *self = GST_VA_JPEG_ENC (base);
+  GstVaJpegEncFrame *frame;
+
+  frame = _enc_frame (gst_frame);
+
+  g_assert (frame->picture == NULL);
+  frame->picture = gst_va_encode_picture_new (base->encoder,
+      gst_frame->input_buffer);
+
+  if (!frame->picture) {
+    GST_ERROR_OBJECT (self, "Failed to create the encode picture");
+    return GST_FLOW_ERROR;
+  }
+
+  if (!_jpeg_encode_one_frame (self, gst_frame)) {
+    GST_ERROR_OBJECT (self, "Failed to encode the frame");
+    return GST_FLOW_ERROR;
+  }
+
+  g_queue_push_tail (&base->output_list, gst_video_codec_frame_ref (gst_frame));
+
+  return GST_FLOW_OK;
+}
+
+static gboolean
+gst_va_jpeg_enc_prepare_output (GstVaBaseEnc * base,
+    GstVideoCodecFrame * frame, gboolean * complete)
+{
+  GstVaJpegEncFrame *frame_enc;
+  GstBuffer *buf;
+
+  frame_enc = _enc_frame (frame);
+
+  frame->pts =
+      base->start_pts + base->frame_duration * frame_enc->total_frame_count;
+  /* The PTS should always be later than the DTS. */
+  frame->dts = frame->pts;
+  frame->duration = base->frame_duration;
+  base->output_frame_count++;
+
+  buf = gst_va_base_enc_create_output_buffer (base, frame_enc->picture);
+  if (!buf) {
+    GST_ERROR_OBJECT (base, "Failed to create output buffer");
+    return FALSE;
+  }
+
+  gst_buffer_replace (&frame->output_buffer, buf);
+  gst_clear_buffer (&buf);
+
+  *complete = TRUE;
+  return TRUE;
+}
+
+/* *INDENT-OFF* */
+static const gchar *sink_caps_str =
+    GST_VIDEO_CAPS_MAKE_WITH_FEATURES (GST_CAPS_FEATURE_MEMORY_VA,
+        "{ NV12 }") " ;"
+    GST_VIDEO_CAPS_MAKE ("{ NV12 }");
+/* *INDENT-ON* */
+
+static const gchar *src_caps_str = "image/jpeg";
+
+static gpointer
+_register_debug_category (gpointer data)
+{
+  GST_DEBUG_CATEGORY_INIT (gst_va_jpegenc_debug, "vajpegenc", 0,
+      "VA jpeg encoder");
+
+  return NULL;
+}
+
+static void
+gst_va_jpeg_enc_init (GTypeInstance * instance, gpointer g_class)
+{
+}
+
+static void
+gst_va_jpeg_enc_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstVaJpegEnc *self = GST_VA_JPEG_ENC (object);
+
+  GST_OBJECT_LOCK (self);
+
+  switch (prop_id) {
+    case PROP_QUALITY:
+      self->prop.quality = g_value_get_uint (value);
+      g_atomic_int_set (&GST_VA_BASE_ENC (self)->reconf, TRUE);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+  }
+
+  GST_OBJECT_UNLOCK (self);
+}
+
+static void
+gst_va_jpeg_enc_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstVaJpegEnc *const self = GST_VA_JPEG_ENC (object);
+
+  GST_OBJECT_LOCK (self);
+
+  switch (prop_id) {
+    case PROP_QUALITY:
+      g_value_set_uint (value, self->prop.quality);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+  }
+
+  GST_OBJECT_UNLOCK (self);
+}
+
+static void
+gst_va_jpeg_enc_class_init (gpointer g_klass, gpointer class_data)
+{
+  GstCaps *src_doc_caps, *sink_doc_caps;
+  GstPadTemplate *sink_pad_templ, *src_pad_templ;
+  GObjectClass *object_class = G_OBJECT_CLASS (g_klass);
+  GstElementClass *element_class = GST_ELEMENT_CLASS (g_klass);
+  GstVaBaseEncClass *va_enc_class = GST_VA_BASE_ENC_CLASS (g_klass);
+  struct CData *cdata = class_data;
+  gchar *long_name;
+  const gchar *name, *desc;
+  gint n_props = N_PROPERTIES;
+
+  desc = "VA-API based JPEG video encoder";
+  name = "VA-API JPEG Encoder";
+
+  if (cdata->description)
+    long_name = g_strdup_printf ("%s in %s", name, cdata->description);
+  else
+    long_name = g_strdup (name);
+
+  gst_element_class_set_metadata (element_class, long_name,
+      "Codec/Encoder/Video/Hardware", desc, "He Junyan <junyan.he@intel.com>");
+
+  sink_doc_caps = gst_caps_from_string (sink_caps_str);
+  src_doc_caps = gst_caps_from_string (src_caps_str);
+
+  parent_class = g_type_class_peek_parent (g_klass);
+
+  va_enc_class->codec = JPEG;
+  va_enc_class->entrypoint = cdata->entrypoint;
+  va_enc_class->render_device_path = g_strdup (cdata->render_device_path);
+
+  sink_pad_templ = gst_pad_template_new ("sink", GST_PAD_SINK, GST_PAD_ALWAYS,
+      cdata->sink_caps);
+  gst_element_class_add_pad_template (element_class, sink_pad_templ);
+
+  gst_pad_template_set_documentation_caps (sink_pad_templ, sink_doc_caps);
+  gst_caps_unref (sink_doc_caps);
+
+  src_pad_templ = gst_pad_template_new ("src", GST_PAD_SRC, GST_PAD_ALWAYS,
+      cdata->src_caps);
+  gst_element_class_add_pad_template (element_class, src_pad_templ);
+
+  gst_pad_template_set_documentation_caps (src_pad_templ, src_doc_caps);
+  gst_caps_unref (src_doc_caps);
+
+  object_class->set_property = gst_va_jpeg_enc_set_property;
+  object_class->get_property = gst_va_jpeg_enc_get_property;
+
+  va_enc_class->reconfig = GST_DEBUG_FUNCPTR (gst_va_jpeg_enc_reconfig);
+  va_enc_class->reset_state = GST_DEBUG_FUNCPTR (gst_va_jpeg_enc_reset_state);
+  va_enc_class->reorder_frame =
+      GST_DEBUG_FUNCPTR (gst_va_jpeg_enc_reorder_frame);
+  va_enc_class->new_frame = GST_DEBUG_FUNCPTR (gst_va_jpeg_enc_new_frame);
+  va_enc_class->encode_frame = GST_DEBUG_FUNCPTR (gst_va_jpeg_enc_encode_frame);
+  va_enc_class->prepare_output =
+      GST_DEBUG_FUNCPTR (gst_va_jpeg_enc_prepare_output);
+
+  g_free (long_name);
+  g_free (cdata->description);
+  g_free (cdata->render_device_path);
+  gst_caps_unref (cdata->src_caps);
+  gst_caps_unref (cdata->sink_caps);
+  g_free (cdata);
+
+  /**
+   * GstVaJpegEnc:quality:
+   *
+   * Quality factor.
+   */
+  properties[PROP_QUALITY] = g_param_spec_uint ("quality",
+      "Quality factor", "Quality factor for encoding", 0, 100, 50,
+      G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS | G_PARAM_CONSTRUCT);
+
+  g_object_class_install_properties (object_class, n_props, properties);
+}
+
+gboolean
+gst_va_jpeg_enc_register (GstPlugin * plugin, GstVaDevice * device,
+    GstCaps * sink_caps, GstCaps * src_caps, guint rank,
+    VAEntrypoint entrypoint)
+{
+  static GOnce debug_once = G_ONCE_INIT;
+  GType type;
+  GTypeInfo type_info = {
+    .class_size = sizeof (GstVaJpegEncClass),
+    .class_init = gst_va_jpeg_enc_class_init,
+    .instance_size = sizeof (GstVaJpegEnc),
+    .instance_init = gst_va_jpeg_enc_init,
+  };
+  struct CData *cdata;
+  gboolean ret;
+  gchar *type_name, *feature_name;
+
+  g_return_val_if_fail (GST_IS_PLUGIN (plugin), FALSE);
+  g_return_val_if_fail (GST_IS_VA_DEVICE (device), FALSE);
+  g_return_val_if_fail (GST_IS_CAPS (sink_caps), FALSE);
+  g_return_val_if_fail (GST_IS_CAPS (src_caps), FALSE);
+  g_return_val_if_fail (entrypoint == VAEntrypointEncPicture, FALSE);
+
+  cdata = g_new (struct CData, 1);
+  cdata->entrypoint = entrypoint;
+  cdata->description = NULL;
+  cdata->render_device_path = g_strdup (device->render_device_path);
+  cdata->sink_caps = gst_caps_ref (sink_caps);
+  cdata->src_caps = gst_caps_ref (src_caps);
+
+  /* class data will be leaked if the element never gets instantiated */
+  GST_MINI_OBJECT_FLAG_SET (cdata->sink_caps,
+      GST_MINI_OBJECT_FLAG_MAY_BE_LEAKED);
+  GST_MINI_OBJECT_FLAG_SET (cdata->src_caps,
+      GST_MINI_OBJECT_FLAG_MAY_BE_LEAKED);
+
+  type_info.class_data = cdata;
+  type_name = g_strdup ("GstVaJpegEnc");
+  feature_name = g_strdup ("vajpegenc");
+
+  /* The first encoder to be registered should use a constant name,
+   * like vajpegenc, for any additional encoders, we create unique
+   * names, using inserting the render device name. */
+  if (g_type_from_name (type_name)) {
+    gchar *basename = g_path_get_basename (device->render_device_path);
+    g_free (type_name);
+    g_free (feature_name);
+    type_name = g_strdup_printf ("GstVa%sJpegEnc", basename);
+    feature_name = g_strdup_printf ("va%sjpegenc", basename);
+    cdata->description = basename;
+    /* lower rank for non-first device */
+    if (rank > 0)
+      rank--;
+  }
+
+  g_once (&debug_once, _register_debug_category, NULL);
+  type = g_type_register_static (GST_TYPE_VA_BASE_ENC,
+      type_name, &type_info, 0);
+  ret = gst_element_register (plugin, feature_name, rank, type);
+
+  g_free (type_name);
+  g_free (feature_name);
+
+  return ret;
+}
diff --git a/subprojects/gst-plugins-bad/sys/va/gstvajpegenc.h b/subprojects/gst-plugins-bad/sys/va/gstvajpegenc.h
new file mode 100644
index 0000000000..7ffd375441
--- /dev/null
+++ b/subprojects/gst-plugins-bad/sys/va/gstvajpegenc.h
@@ -0,0 +1,34 @@
+/* GStreamer
+ *  Copyright (C) 2022 Intel Corporation
+ *     Author: He Junyan <junyan.he@intel.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#pragma once
+
+#include "gstvadevice.h"
+
+G_BEGIN_DECLS
+
+gboolean     gst_va_jpeg_enc_register                (GstPlugin * plugin,
+                                                      GstVaDevice * device,
+                                                      GstCaps * sink_caps,
+                                                      GstCaps * src_caps,
+                                                      guint rank,
+                                                      VAEntrypoint entrypoint);
+
+G_END_DECLS
diff --git a/subprojects/gst-plugins-bad/sys/va/gstvavp9enc.c b/subprojects/gst-plugins-bad/sys/va/gstvavp9enc.c
index efd8a430e8..d65111dcba 100644
--- a/subprojects/gst-plugins-bad/sys/va/gstvavp9enc.c
+++ b/subprojects/gst-plugins-bad/sys/va/gstvavp9enc.c
@@ -2088,7 +2088,7 @@ gst_va_vp9_enc_reconfig (GstVaBaseEnc * base)
   if (!gst_va_encoder_open (base->encoder, base->profile,
           GST_VIDEO_INFO_FORMAT (&base->input_state->info), base->rt_format,
           base->width, base->height, base->codedbuf_size, max_ref_frames,
-          self->rc.rc_ctrl_mode, self->packed_headers)) {
+          self->rc.rc_ctrl_mode, self->packed_headers, NULL)) {
     GST_ERROR_OBJECT (self, "Failed to open the VA encoder.");
     return FALSE;
   }
diff --git a/subprojects/gst-plugins-bad/sys/va/meson.build b/subprojects/gst-plugins-bad/sys/va/meson.build
index c3b47ae1dd..454bc6ecb9 100644
--- a/subprojects/gst-plugins-bad/sys/va/meson.build
+++ b/subprojects/gst-plugins-bad/sys/va/meson.build
@@ -16,6 +16,7 @@ va_sources = [
   'gstvah265dec.c',
   'gstvah265enc.c',
   'gstvajpegdec.c',
+  'gstvajpegenc.c',
   'gstvampeg2dec.c',
   'gstvapluginutils.c',
   'gstvaprofile.c',
diff --git a/subprojects/gst-plugins-bad/sys/va/plugin.c b/subprojects/gst-plugins-bad/sys/va/plugin.c
index 381769f57b..eb3a2168d8 100644
--- a/subprojects/gst-plugins-bad/sys/va/plugin.c
+++ b/subprojects/gst-plugins-bad/sys/va/plugin.c
@@ -44,6 +44,7 @@
 #include "gstvavp8dec.h"
 #include "gstvavp9dec.h"
 #include "gstvavp9enc.h"
+#include "gstvajpegenc.h"
 #include "gstvavpp.h"
 
 #define GST_CAT_DEFAULT gstva_debug
@@ -223,6 +224,13 @@ plugin_register_encoders (GstPlugin * plugin, GstVaDevice * device,
         }
         break;
 #endif
+      case JPEG:
+        if (!gst_va_jpeg_enc_register (plugin, device, sinkcaps, srccaps,
+                GST_RANK_NONE, entrypoint)) {
+          GST_WARNING ("Failed to register JPEG encoder: %s",
+              device->render_device_path);
+        }
+        break;
       default:
         GST_DEBUG ("No encoder implementation for %" GST_FOURCC_FORMAT,
             GST_FOURCC_ARGS (codec));
diff --git a/subprojects/gst-plugins-bad/tests/check/libs/jpegbitwriter.c b/subprojects/gst-plugins-bad/tests/check/libs/jpegbitwriter.c
new file mode 100644
index 0000000000..ce22e65e7e
--- /dev/null
+++ b/subprojects/gst-plugins-bad/tests/check/libs/jpegbitwriter.c
@@ -0,0 +1,263 @@
+/* GStreamer
+ *  Copyright (C) 2022 Intel Corporation
+ *     Author: He Junyan <junyan.he@intel.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the0
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include <gst/check/gstcheck.h>
+#include <gst/codecparsers/gstjpegbitwriter.h>
+
+GST_START_TEST (test_jpeg_bitwriter_segments)
+{
+  GstJpegBitWriterResult writer_res;
+  gboolean parser_res;
+  guint8 data[2048] = { 0, };
+  guint8 app_data[14] =
+      { 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0, 0, 0x01, 0, 0x01, 0, 0 };
+  GstJpegQuantTables quant_tables = { 0, };
+  GstJpegQuantTables quant_tables2 = { 0, };
+  GstJpegHuffmanTables huf_tables = { 0, };
+  GstJpegHuffmanTables huf_tables2 = { 0, };
+  GstJpegFrameHdr frame_hdr;
+  GstJpegFrameHdr frame_hdr2 = { 0, };
+  GstJpegScanHdr scan_hdr;
+  GstJpegScanHdr scan_hdr2 = { 0, };
+  GstJpegSegment seg;
+  guint size, offset;
+  guint i, j;
+
+  offset = 0;
+  size = sizeof (data);
+  writer_res = gst_jpeg_bit_writer_segment_with_data (GST_JPEG_MARKER_SOI,
+      NULL, 0, data, &size);
+  fail_if (writer_res != GST_JPEG_BIT_WRITER_OK);
+
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_segment_with_data (GST_JPEG_MARKER_APP_MIN,
+      app_data, sizeof (app_data), data + offset, &size);
+  fail_if (writer_res != GST_JPEG_BIT_WRITER_OK);
+
+  gst_jpeg_get_default_quantization_tables (&quant_tables);
+  for (i = 0; i < GST_JPEG_MAX_QUANT_ELEMENTS; i++) {
+    if (i % 2)
+      quant_tables.quant_tables[0].quant_table[i] += 10;
+
+    if (i % 3)
+      quant_tables.quant_tables[1].quant_table[i] += 5;
+
+    if (i % 4)
+      quant_tables.quant_tables[2].quant_table[i] /= 2;
+  }
+
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_quantization_table (&quant_tables,
+      data + offset, &size);
+  fail_if (writer_res != GST_JPEG_BIT_WRITER_OK);
+
+  /* *INDENT-OFF* */
+  frame_hdr = (GstJpegFrameHdr) {
+    .sample_precision = 8,
+    .width = 1920,
+    .height = 1080,
+    .num_components = 3,
+    .components[0] = {
+      .identifier = 1,
+      .horizontal_factor= 3,
+      .vertical_factor = 2,
+      .quant_table_selector = 1,
+    },
+    .components[1] = {
+      .identifier = 2,
+      .horizontal_factor= 1,
+      .vertical_factor = 4,
+      .quant_table_selector = 2,
+    },
+    .components[2] = {
+      .identifier = 0,
+      .horizontal_factor = 2,
+      .vertical_factor = 1,
+      .quant_table_selector = 3,
+    },
+  };
+  /* *INDENT-ON* */
+
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_frame_header (&frame_hdr,
+      GST_JPEG_MARKER_SOF_MIN, data + offset, &size);
+  fail_if (writer_res != GST_JPEG_BIT_WRITER_OK);
+
+  gst_jpeg_get_default_huffman_tables (&huf_tables);
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_huffman_table (&huf_tables,
+      data + offset, &size);
+  fail_if (writer_res != GST_JPEG_BIT_WRITER_OK);
+
+  /* *INDENT-OFF* */
+  scan_hdr = (GstJpegScanHdr) {
+    .num_components = 3,
+    .components[0] = {
+      .component_selector = 85,
+      .dc_selector = 2,
+      .ac_selector = 1,
+    },
+    .components[1] = {
+      .component_selector = 16,
+      .dc_selector = 1,
+      .ac_selector = 0,
+    },
+    .components[0] = {
+      .component_selector = 25,
+      .dc_selector = 2,
+      .ac_selector = 1,
+    },
+  };
+  /* *INDENT-ON* */
+  offset += size;
+  size = sizeof (data) - offset;
+  writer_res = gst_jpeg_bit_writer_scan_header (&scan_hdr,
+      data + offset, &size);
+  fail_if (writer_res != GST_JPEG_BIT_WRITER_OK);
+
+  offset += size;
+  fail_if (offset + 2 >= sizeof (data));
+
+  offset = sizeof (data) - 2;
+  size = 2;
+  writer_res = gst_jpeg_bit_writer_segment_with_data (GST_JPEG_MARKER_EOI,
+      NULL, 0, data + offset, &size);
+  fail_if (writer_res != GST_JPEG_BIT_WRITER_OK);
+
+  /* Parse it back and check. */
+  /* SOI */
+  offset = 0;
+  parser_res = gst_jpeg_parse (&seg, data, sizeof (data), offset);
+  fail_if (parser_res != TRUE);
+  fail_if (seg.marker != GST_JPEG_MARKER_SOI);
+
+  /* APP0 */
+  offset += 2 + seg.size;
+  parser_res = gst_jpeg_parse (&seg, data, sizeof (data), offset);
+  fail_if (parser_res != TRUE);
+  fail_if (seg.marker != GST_JPEG_MARKER_APP_MIN);
+  fail_if (*(seg.data + seg.offset) * 256 + *(seg.data + seg.offset + 1) !=
+      seg.size);
+  for (i = 0; i < sizeof (app_data); i++) {
+    const guint8 *d = seg.data + seg.offset + 2;
+    fail_if (d[i] != app_data[i]);
+  }
+
+  /* Quantization tables */
+  offset += 2 + seg.size;
+  parser_res = gst_jpeg_parse (&seg, data, sizeof (data), offset);
+  fail_if (parser_res != TRUE);
+  fail_if (seg.marker != GST_JPEG_MARKER_DQT);
+  fail_if (*(seg.data + seg.offset) * 256 + *(seg.data + seg.offset + 1) !=
+      seg.size);
+  parser_res = gst_jpeg_segment_parse_quantization_table (&seg, &quant_tables2);
+  fail_if (parser_res != TRUE);
+
+  for (i = 0; i < GST_JPEG_MAX_SCAN_COMPONENTS; i++) {
+    GstJpegQuantTable *quant_table = &quant_tables.quant_tables[i];
+    GstJpegQuantTable *quant_table2 = &quant_tables2.quant_tables[i];
+
+    fail_if (quant_table->quant_precision != quant_table2->quant_precision);
+    fail_if (quant_table->valid != quant_table2->valid);
+
+    for (j = 0; j < GST_JPEG_MAX_QUANT_ELEMENTS; j++)
+      fail_if (quant_table->quant_table[j] != quant_table2->quant_table[j]);
+  }
+
+  /* SOF */
+  offset += 2 + seg.size;
+  parser_res = gst_jpeg_parse (&seg, data, sizeof (data), offset);
+  fail_if (parser_res != TRUE);
+  fail_if (seg.marker != GST_JPEG_MARKER_SOF_MIN);
+  fail_if (*(seg.data + seg.offset) * 256 + *(seg.data + seg.offset + 1) !=
+      seg.size);
+  parser_res = gst_jpeg_segment_parse_frame_header (&seg, &frame_hdr2);
+  fail_if (parser_res != TRUE);
+
+  fail_if (frame_hdr.sample_precision != frame_hdr2.sample_precision);
+  fail_if (frame_hdr.width != frame_hdr2.width);
+  fail_if (frame_hdr.height != frame_hdr2.height);
+  fail_if (frame_hdr.num_components != frame_hdr2.num_components);
+  for (i = 0; i < frame_hdr.num_components; i++) {
+    fail_if (frame_hdr.components[i].identifier !=
+        frame_hdr2.components[i].identifier);
+    fail_if (frame_hdr.components[i].horizontal_factor !=
+        frame_hdr2.components[i].horizontal_factor);
+    fail_if (frame_hdr.components[i].vertical_factor !=
+        frame_hdr2.components[i].vertical_factor);
+    fail_if (frame_hdr.components[i].quant_table_selector !=
+        frame_hdr2.components[i].quant_table_selector);
+  }
+
+  /* huffman tables */
+  offset += 2 + seg.size;
+  parser_res = gst_jpeg_parse (&seg, data, sizeof (data), offset);
+  fail_if (parser_res != TRUE);
+  fail_if (seg.marker != GST_JPEG_MARKER_DHT);
+  fail_if (*(seg.data + seg.offset) * 256 + *(seg.data + seg.offset + 1) !=
+      seg.size);
+  parser_res = gst_jpeg_segment_parse_huffman_table (&seg, &huf_tables2);
+  fail_if (parser_res != TRUE);
+  fail_if (memcmp (&huf_tables, &huf_tables2, sizeof (huf_tables)) != 0);
+
+  /* Scan header */
+  offset += 2 + seg.size;
+  parser_res = gst_jpeg_parse (&seg, data, sizeof (data), offset);
+  fail_if (parser_res != TRUE);
+  fail_if (seg.marker != GST_JPEG_MARKER_SOS);
+  parser_res = gst_jpeg_segment_parse_scan_header (&seg, &scan_hdr2);
+  fail_if (parser_res != TRUE);
+
+  fail_if (scan_hdr.num_components != scan_hdr2.num_components);
+  for (i = 0; i < scan_hdr.num_components; i++) {
+    fail_if (scan_hdr.components[i].component_selector !=
+        scan_hdr2.components[i].component_selector);
+    fail_if (scan_hdr.components[i].dc_selector !=
+        scan_hdr2.components[i].dc_selector);
+    fail_if (scan_hdr.components[i].ac_selector !=
+        scan_hdr2.components[i].ac_selector);
+  }
+
+  offset += 2 + seg.size;
+  parser_res = gst_jpeg_parse (&seg, data, sizeof (data), offset);
+  fail_if (parser_res != TRUE);
+  fail_if (seg.marker != GST_JPEG_MARKER_EOI);
+}
+
+GST_END_TEST;
+
+static Suite *
+jpegbitwriter_suite (void)
+{
+  Suite *s = suite_create ("jpeg bitwriter library");
+
+  TCase *tc_chain = tcase_create ("general");
+
+  suite_add_tcase (s, tc_chain);
+  tcase_add_test (tc_chain, test_jpeg_bitwriter_segments);
+
+  return s;
+}
+
+GST_CHECK_MAIN (jpegbitwriter);
diff --git a/subprojects/gst-plugins-bad/tests/check/meson.build b/subprojects/gst-plugins-bad/tests/check/meson.build
index b1ea39bf8b..33d2e32e34 100644
--- a/subprojects/gst-plugins-bad/tests/check/meson.build
+++ b/subprojects/gst-plugins-bad/tests/check/meson.build
@@ -91,6 +91,7 @@ base_tests = [
   [['libs/vp8parser.c'], false, [gstcodecparsers_dep]],
   [['libs/vp9parser.c'], false, [gstcodecparsers_dep]],
   [['libs/av1parser.c'], false, [gstcodecparsers_dep]],
+  [['libs/jpegbitwriter.c'], false, [gstcodecparsers_dep]],
   [['libs/h264bitwriter.c'], false, [gstcodecparsers_dep]],
   [['libs/h265bitwriter.c'], false, [gstcodecparsers_dep]],
   [['libs/av1bitwriter.c'], false, [gstcodecparsers_dep]],
-- 
2.34.1

