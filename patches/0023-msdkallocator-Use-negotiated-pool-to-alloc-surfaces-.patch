From 7448edd1e308f1f5285cd94ed6e29fb0afca01d5 Mon Sep 17 00:00:00 2001
From: Mengkejiergeli Ba <mengkejiergeli.ba@intel.com>
Date: Tue, 23 Aug 2022 10:48:50 +0800
Subject: [PATCH 23/26] msdkallocator: Use negotiated pool to alloc surfaces in
 linux path

Use negotiated bufferpool stored in GstMsdkContext to allocate buffers
in the callback MfxFrameAllocator:Alloc, then extract VASurface from buffer,
wrap it as mfxMemIDs and pass these IDs to MediaSDK/oneVPL.
---
 .../sys/msdk/gstmsdkallocator.h               |   2 +-
 .../sys/msdk/gstmsdkallocator_libva.c         | 261 +++++-------------
 .../gst-plugins-bad/sys/msdk/gstmsdkcontext.c |  21 --
 3 files changed, 65 insertions(+), 219 deletions(-)

diff --git a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkallocator.h b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkallocator.h
index c1ea70a3d9..b8d905095b 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkallocator.h
+++ b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkallocator.h
@@ -45,7 +45,7 @@ struct _GstMsdkMemoryID {
   mfxU32 fourcc;
 
 #ifndef _WIN32
-  VASurfaceID *surface;
+  VASurfaceID surface;
   VAImage image;
   VADRMPRIMESurfaceDescriptor desc;
 #else
diff --git a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkallocator_libva.c b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkallocator_libva.c
index 55785a180c..8acae9f1e6 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkallocator_libva.c
+++ b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkallocator_libva.c
@@ -45,20 +45,18 @@ mfxStatus
 gst_msdk_frame_alloc (mfxHDL pthis, mfxFrameAllocRequest * req,
     mfxFrameAllocResponse * resp)
 {
-  VAStatus va_status;
   mfxStatus status = MFX_ERR_NONE;
   gint i;
-  guint format;
   guint va_fourcc = 0;
-  VASurfaceID *surfaces = NULL;
-  VASurfaceAttrib attribs[2];
-  guint num_attribs = 0;
+  GstMsdkSurface *msdk_surface = NULL;
   mfxMemId *mids = NULL;
   GstMsdkContext *context = (GstMsdkContext *) pthis;
-  GstMsdkMemoryID *msdk_mids = NULL;
   GstMsdkAllocResponse *msdk_resp = NULL;
   mfxU32 fourcc = req->Info.FourCC;
   mfxU16 surfaces_num = req->NumFrameSuggested;
+  GList *tmp_list = NULL;
+  GList *l;
+  GstMsdkSurface *tmp_surface = NULL;
 
   /* MFX_MAKEFOURCC('V','P','8','S') is used for MFX_FOURCC_VP9_SEGMAP surface
    * in MSDK and this surface is an internal surface. The external allocator
@@ -93,158 +91,62 @@ gst_msdk_frame_alloc (mfxHDL pthis, mfxFrameAllocRequest * req,
     return MFX_ERR_UNSUPPORTED;
 
   va_fourcc = gst_msdk_get_va_fourcc_from_mfx_fourcc (fourcc);
-
-  msdk_mids =
-      (GstMsdkMemoryID *) g_slice_alloc0 (surfaces_num *
-      sizeof (GstMsdkMemoryID));
   mids = (mfxMemId *) g_slice_alloc0 (surfaces_num * sizeof (mfxMemId));
-  surfaces =
-      (VASurfaceID *) g_slice_alloc0 (surfaces_num * sizeof (VASurfaceID));
   msdk_resp =
       (GstMsdkAllocResponse *) g_slice_alloc0 (sizeof (GstMsdkAllocResponse));
 
   if (va_fourcc != VA_FOURCC_P208) {
-    attribs[0].type = VASurfaceAttribPixelFormat;
-    attribs[0].flags = VA_SURFACE_ATTRIB_SETTABLE;
-    attribs[0].value.type = VAGenericValueTypeInteger;
-    attribs[0].value.value.i = va_fourcc;
-    num_attribs = 1;
-
-    /* set VA_SURFACE_ATTRIB_USAGE_HINT_ENCODER flag for encoding */
-#if (MFX_VERSION >= 1025)
-    if ((req->Type & MFX_MEMTYPE_VIDEO_MEMORY_ENCODER_TARGET) &&
-        (req->Type & MFX_MEMTYPE_FROM_ENCODE)) {
-      attribs[1].type = VASurfaceAttribUsageHint;
-      attribs[1].flags = VA_SURFACE_ATTRIB_SETTABLE;
-      attribs[1].value.type = VAGenericValueTypeInteger;
-      attribs[1].value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_ENCODER;
-      num_attribs = 2;
+    GstBufferPool *pool;
+    GstVideoFormat format;
+    GstStructure *config;
+    GstVideoInfo info;
+    GstCaps *caps;
+    GstVideoAlignment align;
+
+    format = gst_msdk_get_video_format_from_mfx_fourcc (fourcc);
+    gst_video_info_set_format (&info, format, req->Info.CropW, req->Info.CropH);
+
+    gst_video_alignment_reset (&align);
+    gst_msdk_set_video_alignment
+        (&info, req->Info.Width, req->Info.Height, &align);
+    gst_video_info_align (&info, &align);
+
+    caps = gst_video_info_to_caps (&info);
+
+    pool = gst_msdk_context_get_alloc_pool (context);
+    if (!pool) {
+      return MFX_ERR_MEMORY_ALLOC;
     }
-#endif
-
-    format =
-        gst_msdk_get_va_rt_format_from_mfx_rt_format (req->Info.ChromaFormat);
-
-    if (format == VA_RT_FORMAT_YUV420 && va_fourcc == VA_FOURCC_P010)
-#if VA_CHECK_VERSION(1, 2, 0)
-      format = VA_RT_FORMAT_YUV420_10;
-#else
-      format = VA_RT_FORMAT_YUV420_10BPP;
-#endif
 
-#if VA_CHECK_VERSION(1, 4, 1)
-    if (format == VA_RT_FORMAT_YUV444 && va_fourcc == VA_FOURCC_A2R10G10B10)
-      format = VA_RT_FORMAT_RGB32_10;
-#endif
-
-#if ((MFX_VERSION >= 1027) && VA_CHECK_VERSION(1, 2, 0))
-    if (format == VA_RT_FORMAT_YUV422 && va_fourcc == VA_FOURCC_Y210)
-      format = VA_RT_FORMAT_YUV422_10;
-    else if (format == VA_RT_FORMAT_YUV444 && va_fourcc == VA_FOURCC_Y410)
-      format = VA_RT_FORMAT_YUV444_10;
-#endif
-
-#if ((MFX_VERSION >= 1031) && VA_CHECK_VERSION(1, 2, 0))
-    if (format == VA_RT_FORMAT_YUV420 && va_fourcc == VA_FOURCC_P016)
-      format = VA_RT_FORMAT_YUV420_12;
+    config = gst_buffer_pool_get_config (GST_BUFFER_POOL_CAST (pool));
+    gst_buffer_pool_config_set_params (config, caps,
+        GST_VIDEO_INFO_SIZE (&info), surfaces_num, surfaces_num);
+    gst_buffer_pool_config_add_option (config,
+        GST_BUFFER_POOL_OPTION_VIDEO_META);
+    gst_buffer_pool_config_add_option (config,
+        GST_BUFFER_POOL_OPTION_VIDEO_ALIGNMENT);
+    gst_buffer_pool_config_set_va_alignment (config, &align);
 
-    if (format == VA_RT_FORMAT_YUV422 && va_fourcc == VA_FOURCC_Y216)
-      format = VA_RT_FORMAT_YUV422_12;
-
-    if (format == VA_RT_FORMAT_YUV444 && va_fourcc == VA_FOURCC_Y416)
-      format = VA_RT_FORMAT_YUV444_12;
-#endif
-
-#if (MFX_VERSION >= 2004)
-    if (format == VA_RT_FORMAT_YUV444 && (va_fourcc == VA_FOURCC_RGBP
-            || va_fourcc == VA_FOURCC_BGRP))
-      format = VA_RT_FORMAT_RGBP;
-#endif
-
-    va_status = vaCreateSurfaces (gst_msdk_context_get_handle (context),
-        format,
-        req->Info.Width, req->Info.Height, surfaces, surfaces_num, attribs,
-        num_attribs);
-
-    status = gst_msdk_get_mfx_status_from_va_status (va_status);
-    if (status != MFX_ERR_NONE) {
-      GST_WARNING ("failed to create VA surface");
-      return status;
-    }
+    gst_buffer_pool_set_config (pool, config);
+    gst_buffer_pool_set_active (pool, TRUE);
 
     for (i = 0; i < surfaces_num; i++) {
-      /* Get dmabuf handle if MFX_MEMTYPE_EXPORT_FRAME */
-      if (req->Type & MFX_MEMTYPE_EXPORT_FRAME) {
-        VADRMPRIMESurfaceDescriptor va_desc = { 0 };
-        uint32_t export_flags = VA_EXPORT_SURFACE_SEPARATE_LAYERS |
-            VA_EXPORT_SURFACE_READ_WRITE;
-
-        va_status =
-            vaExportSurfaceHandle (gst_msdk_context_get_handle (context),
-            surfaces[i], VA_SURFACE_ATTRIB_MEM_TYPE_DRM_PRIME_2, export_flags,
-            &va_desc);
-
-        status = gst_msdk_get_mfx_status_from_va_status (va_status);
+      GstBuffer *buf;
 
-        if (MFX_ERR_NONE != status) {
-          GST_ERROR ("Failed to export surface");
-          return status;
-        }
-
-        g_assert (va_desc.num_objects);
-
-        /* This plugin supports single object only */
-        if (va_desc.num_objects > 1) {
-          GST_ERROR ("Can not support multiple objects");
-          return MFX_ERR_UNSUPPORTED;
-        }
-
-        msdk_mids[i].desc = va_desc;
-      }
-
-      /* Don't use image for DMABuf */
-      msdk_mids[i].image.image_id = VA_INVALID_ID;
-      msdk_mids[i].image.buf = VA_INVALID_ID;
-
-      msdk_mids[i].surface = &surfaces[i];
-      mids[i] = (mfxMemId *) & msdk_mids[i];
-    }
-  } else {
-    /* This is requested from the driver when h265 encoding.
-     * These buffers will be used inside the driver and released by
-     * gst_msdk_frame_free functions. Application doesn't need to handle these buffers.
-     *
-     * See https://github.com/Intel-Media-SDK/samples/issues/13 for more details.
-     */
-    VAContextID context_id = req->AllocId;
-    gint width32 = 32 * ((req->Info.Width + 31) >> 5);
-    gint height32 = 32 * ((req->Info.Height + 31) >> 5);
-    guint64 codedbuf_size = (width32 * height32) * 400LL / (16 * 16);
-
-    for (i = 0; i < surfaces_num; i++) {
-      VABufferID coded_buf;
-
-      va_status = vaCreateBuffer (gst_msdk_context_get_handle (context),
-          context_id, VAEncCodedBufferType, codedbuf_size, 1, NULL, &coded_buf);
-
-      status = gst_msdk_get_mfx_status_from_va_status (va_status);
-      if (status < MFX_ERR_NONE) {
-        GST_ERROR ("failed to create buffer");
-        return status;
+      if (gst_buffer_pool_acquire_buffer (pool, &buf, NULL) != GST_FLOW_OK) {
+        GST_ERROR ("Failed to allocate buffer");
+        gst_buffer_pool_set_active (pool, FALSE);
+        gst_object_unref (pool);
+        return MFX_ERR_MEMORY_ALLOC;
       }
 
-      surfaces[i] = coded_buf;
-      msdk_mids[i].surface = &surfaces[i];
-      msdk_mids[i].fourcc = fourcc;
-
-      /* Don't use image for P208 */
-      msdk_mids[i].image.image_id = VA_INVALID_ID;
-      msdk_mids[i].image.buf = VA_INVALID_ID;
-
-      mids[i] = (mfxMemId *) & msdk_mids[i];
+      msdk_surface = gst_msdk_import_to_msdk_surface (buf, context, &info);
+      if (msdk_surface)
+        msdk_surface->buf = buf;
+      mids[i] = msdk_surface->surface->Data.MemId;
+      tmp_list = g_list_prepend (tmp_list, msdk_surface);
     }
   }
-
   resp->mids = mids;
   resp->NumFrameActual = surfaces_num;
 
@@ -254,6 +156,12 @@ gst_msdk_frame_alloc (mfxHDL pthis, mfxFrameAllocRequest * req,
 
   gst_msdk_context_add_alloc_response (context, msdk_resp);
 
+  /* We need to put all the buffers back to the pool */
+  for (l = tmp_list; l; l = l->next) {
+    tmp_surface = (GstMsdkSurface *) l->data;
+    gst_buffer_unref (tmp_surface->buf);
+  }
+
   return status;
 }
 
@@ -261,11 +169,6 @@ mfxStatus
 gst_msdk_frame_free (mfxHDL pthis, mfxFrameAllocResponse * resp)
 {
   GstMsdkContext *context = (GstMsdkContext *) pthis;
-  VAStatus va_status = VA_STATUS_SUCCESS;
-  mfxStatus status;
-  GstMsdkMemoryID *mem_id;
-  VADisplay dpy;
-  gint i;
   GstMsdkAllocResponse *cached = NULL;
 
   cached = gst_msdk_context_get_cached_alloc_responses (context, resp);
@@ -279,45 +182,10 @@ gst_msdk_frame_free (mfxHDL pthis, mfxFrameAllocResponse * resp)
   if (!gst_msdk_context_remove_alloc_response (context, resp))
     return MFX_ERR_NONE;
 
-  mem_id = resp->mids[0];
-  dpy = gst_msdk_context_get_handle (context);
-
-  if (mem_id->fourcc != MFX_FOURCC_P8) {
-    /* Make sure that all the vaImages are destroyed */
-    for (i = 0; i < resp->NumFrameActual; i++) {
-      GstMsdkMemoryID *mem = resp->mids[i];
-
-      /* Release prime fd if used */
-      if (mem->desc.num_objects) {
-        g_assert (mem->desc.num_objects == 1);
-        close (mem->desc.objects[0].fd);
-        mem->desc.num_objects = 0;
-      }
-
-      if (mem->image.image_id != VA_INVALID_ID &&
-          vaDestroyImage (dpy, mem->image.image_id) == VA_STATUS_SUCCESS) {
-        mem_id->image.image_id = VA_INVALID_ID;
-        mem_id->image.buf = VA_INVALID_ID;
-      }
-    }
-
-    va_status =
-        vaDestroySurfaces (dpy, (VASurfaceID *) mem_id->surface,
-        resp->NumFrameActual);
-  } else {
-    VASurfaceID *surfaces = mem_id->surface;
-
-    for (i = 0; i < resp->NumFrameActual; i++) {
-      va_status = vaDestroyBuffer (dpy, surfaces[i]);
-    }
-  }
-
-  g_slice_free1 (resp->NumFrameActual * sizeof (VASurfaceID), mem_id->surface);
-  g_slice_free1 (resp->NumFrameActual * sizeof (GstMsdkMemoryID), mem_id);
   g_slice_free1 (resp->NumFrameActual * sizeof (mfxMemId), resp->mids);
 
-  status = gst_msdk_get_mfx_status_from_va_status (va_status);
-  return status;
+  return MFX_ERR_NONE;
+
 }
 
 mfxStatus
@@ -327,7 +195,7 @@ gst_msdk_frame_lock (mfxHDL pthis, mfxMemId mid, mfxFrameData * data)
   VAStatus va_status;
   mfxStatus status;
   mfxU8 *buf = NULL;
-  VASurfaceID *va_surface;
+  VASurfaceID va_surface;
   VADisplay dpy;
   GstMsdkMemoryID *mem_id;
 
@@ -341,7 +209,7 @@ gst_msdk_frame_lock (mfxHDL pthis, mfxMemId mid, mfxFrameData * data)
   }
 
   if (mem_id->fourcc != MFX_FOURCC_P8) {
-    va_status = vaDeriveImage (dpy, *va_surface, &mem_id->image);
+    va_status = vaDeriveImage (dpy, va_surface, &mem_id->image);
     status = gst_msdk_get_mfx_status_from_va_status (va_status);
 
     if (status != MFX_ERR_NONE) {
@@ -469,7 +337,7 @@ gst_msdk_frame_lock (mfxHDL pthis, mfxMemId mid, mfxFrameData * data)
   } else {
     VACodedBufferSegment *coded_buffer_segment;
     va_status =
-        vaMapBuffer (dpy, *va_surface, (void **) (&coded_buffer_segment));
+        vaMapBuffer (dpy, va_surface, (void **) (&coded_buffer_segment));
     status = gst_msdk_get_mfx_status_from_va_status (va_status);
     if (MFX_ERR_NONE == status)
       data->Y = (mfxU8 *) coded_buffer_segment->buf;
@@ -501,7 +369,7 @@ gst_msdk_frame_unlock (mfxHDL pthis, mfxMemId mid, mfxFrameData * ptr)
       mem_id->image.buf = VA_INVALID_ID;
     }
   } else {
-    va_status = vaUnmapBuffer (dpy, *(mem_id->surface));
+    va_status = vaUnmapBuffer (dpy, (mem_id->surface));
   }
 
   status = gst_msdk_get_mfx_status_from_va_status (va_status);
@@ -518,7 +386,7 @@ gst_msdk_frame_get_hdl (mfxHDL pthis, mfxMemId mid, mfxHDL * hdl)
     return MFX_ERR_INVALID_HANDLE;
 
   mem_id = mid;
-  *hdl = mem_id->surface;
+  *hdl = &mem_id->surface;
 
   return MFX_ERR_NONE;
 }
@@ -791,8 +659,7 @@ gst_msdk_import_to_msdk_surface (GstBuffer * buf, GstMsdkContext * msdk_context,
   mfx_surface = g_slice_new0 (mfxFrameSurface1);
   msdk_mid = g_slice_new0 (GstMsdkMemoryID);
 
-  msdk_mid->surface = g_slice_new0 (VASurfaceID);
-  *msdk_mid->surface = va_surface;
+  msdk_mid->surface = va_surface;
 
   mfx_surface->Data.MemId = (mfxMemId) msdk_mid;
 
@@ -824,7 +691,7 @@ gst_msdk_replace_mfx_memid (GstMsdkContext * context,
 {
   GstMsdkMemoryID *msdk_mid = NULL;
   VADisplay dpy;
-  VASurfaceID *old_surface_id;
+  VASurfaceID old_surface_id;
   VAStatus va_status;
   mfxStatus status = MFX_ERR_NONE;
 
@@ -845,14 +712,14 @@ gst_msdk_replace_mfx_memid (GstMsdkContext * context,
 
   /* Destroy the associated VASurface */
   old_surface_id = msdk_mid->surface;
-  if (*old_surface_id != VA_INVALID_ID) {
-    va_status = vaDestroySurfaces (dpy, old_surface_id, 1);
+  if (old_surface_id != VA_INVALID_ID) {
+    va_status = vaDestroySurfaces (dpy, &old_surface_id, 1);
     status = gst_msdk_get_mfx_status_from_va_status (va_status);
     if (status != MFX_ERR_NONE)
       goto error_destroy_va_surface;
   }
 
-  *msdk_mid->surface = surface_id;
+  msdk_mid->surface = surface_id;
 
   return TRUE;
 
@@ -863,7 +730,7 @@ error_destroy_va_image:
   }
 error_destroy_va_surface:
   {
-    GST_ERROR ("Failed to Destroy the VASurfaceID %x", *old_surface_id);
+    GST_ERROR ("Failed to Destroy the VASurfaceID %x", old_surface_id);
     return FALSE;
   }
 }
diff --git a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkcontext.c b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkcontext.c
index 9aee2e39dd..590afb52f1 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkcontext.c
+++ b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkcontext.c
@@ -552,25 +552,6 @@ gst_msdk_context_get_cached_alloc_responses_by_request (GstMsdkContext *
     return NULL;
 }
 
-static void
-create_surfaces (GstMsdkContext * context, GstMsdkAllocResponse * resp)
-{
-  gint i;
-  mfxMemId *mem_id;
-  mfxFrameSurface1 *surface;
-
-  for (i = 0; i < resp->response.NumFrameActual; i++) {
-    mem_id = resp->response.mids[i];
-    surface = (mfxFrameSurface1 *) g_slice_new0 (mfxFrameSurface1);
-    if (!surface) {
-      GST_ERROR ("failed to allocate surface");
-      break;
-    }
-    surface->Data.MemId = mem_id;
-    resp->surfaces_avail = g_list_prepend (resp->surfaces_avail, surface);
-  }
-}
-
 static void
 free_surface (gpointer surface)
 {
@@ -591,8 +572,6 @@ gst_msdk_context_add_alloc_response (GstMsdkContext * context,
 {
   context->priv->cached_alloc_responses =
       g_list_prepend (context->priv->cached_alloc_responses, resp);
-
-  create_surfaces (context, resp);
 }
 
 gboolean
-- 
2.25.1

