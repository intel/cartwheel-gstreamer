From 9864c4c46c7e17945902bf14e58ff4fbdbac73e9 Mon Sep 17 00:00:00 2001
From: Mengkejiergeli Ba <mengkejiergeli.ba@intel.com>
Date: Thu, 16 May 2024 10:12:41 +0800
Subject: [PATCH] msdkenc: Add VPL string API option

VPL API 2.10 introduces a new interface to configure encode, decode
and postprocing. This patch add this interface, which we call stringAPI,
to msdkenc, user can directly set mfxVideoParam as well as mfxExtBuffer
via a new property called string-params.
---
 .../gst-plugins-bad/sys/msdk/gstmsdkenc.c     | 86 +++++++++++++++++++
 .../gst-plugins-bad/sys/msdk/gstmsdkenc.h     |  5 ++
 2 files changed, 91 insertions(+)

diff --git a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.c b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.c
index c32f6f6e57..7f83544f5b 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.c
+++ b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.c
@@ -104,6 +104,7 @@ GST_DEBUG_CATEGORY_EXTERN (gst_msdkenc_debug);
 #define PROP_LOWDELAY_BRC_DEFAULT        MFX_CODINGOPTION_OFF
 #define PROP_ADAPTIVE_I_DEFAULT          MFX_CODINGOPTION_UNKNOWN
 #define PROP_ADAPTIVE_B_DEFAULT          MFX_CODINGOPTION_UNKNOWN
+#define PROP_STRING_PARAMS_DEFAULT       NULL
 
 /* External coding properties */
 #define EC_PROPS_STRUCT_NAME             "props"
@@ -499,6 +500,12 @@ gst_msdkenc_init_encoder (GstMsdkEnc * thiz)
   mfxFrameAllocRequest request;
   guint i;
   mfxExtVideoSignalInfo ext_vsi;
+#if (MFX_VERSION >= 2010)
+  mfxConfigInterface *iface = NULL;
+  guint ret;
+  gchar **string_arr = NULL;
+  mfxExtBuffer ext_buf;
+#endif
 
   if (!thiz->context) {
     GST_WARNING_OBJECT (thiz, "No MSDK Context");
@@ -683,6 +690,52 @@ gst_msdkenc_init_encoder (GstMsdkEnc * thiz)
     thiz->param.ExtParam = thiz->extra_params;
   }
 
+  if (thiz->string_params) {
+#if (MFX_VERSION >= 2010)
+    ret = MFXVideoCORE_GetHandle (session, MFX_HANDLE_CONFIG_INTERFACE,
+        (mfxHDL *) (&iface));
+    if (ret < 0) {
+      GST_ERROR_OBJECT (session, "Error getting mfx config interface handle");
+      goto failed;
+    }
+
+    string_arr = g_strsplit (thiz->string_params, ",", 0);
+
+    for (guint m = 0; string_arr[m]; m++) {
+      gchar **tmp_arr = g_strsplit (string_arr[m], ":", 0);
+      const gchar *key = tmp_arr[0];
+      const gchar *value = tmp_arr[1];
+      mfxExtBuffer *new_ext_buf;
+
+      for (guint n = 0; n < 2; n++) {
+        ret = iface->SetParameter (iface, (mfxU8 *) key, (mfxU8 *) value,
+            MFX_STRUCTURE_TYPE_VIDEO_PARAM, &thiz->param, &ext_buf);
+        if (ret == MFX_ERR_NONE) {
+          break;
+        } else if (n == 0 && ret == MFX_ERR_MORE_EXTBUFFER) {
+          thiz->extra_string_params =
+              g_realloc_n (thiz->extra_string_params,
+              thiz->num_extra_string_params + 1, sizeof (mfxExtBuffer *));
+
+          new_ext_buf = g_malloc0 (ext_buf.BufferSz);
+          new_ext_buf->BufferId = ext_buf.BufferId;
+          new_ext_buf->BufferSz = ext_buf.BufferSz;
+          thiz->extra_string_params[thiz->num_extra_string_params] =
+              (mfxExtBuffer *) new_ext_buf;
+          thiz->num_extra_string_params++;
+          gst_msdkenc_add_extra_param (thiz, (mfxExtBuffer *) new_ext_buf);
+          thiz->param.NumExtParam = thiz->num_extra_params;
+          thiz->param.ExtParam = thiz->extra_params;
+        } else {
+          goto failed;
+        }
+      }
+    }
+#else
+    GST_WARNING_OBJECT (thiz, "String API is not support for vpl < 2.1");
+#endif
+  }
+
   /* validate parameters and allow MFX to make adjustments */
   status = MFXVideoENCODE_Query (session, &thiz->param, &thiz->param);
   if (status < MFX_ERR_NONE) {
@@ -795,6 +848,13 @@ gst_msdkenc_close_encoder (GstMsdkEnc * thiz)
   g_free (thiz->tasks);
   thiz->tasks = NULL;
 
+  for (i = 0; i < thiz->num_extra_string_params; i++)
+    g_free (thiz->extra_string_params[i]);
+
+  g_free (thiz->extra_string_params);
+  thiz->extra_string_params = NULL;
+  thiz->num_extra_string_params = 0;
+
   memset (&thiz->param, 0, sizeof (thiz->param));
   thiz->num_extra_params = 0;
   thiz->initialized = FALSE;
@@ -2188,6 +2248,9 @@ gst_msdkenc_set_common_property (GObject * object, guint prop_id,
     case GST_MSDKENC_PROP_ADAPTIVE_B:
       thiz->adaptive_b = g_value_get_enum (value);
       break;
+    case GST_MSDKENC_PROP_STRING_PARAMS:
+      thiz->string_params = g_value_dup_string (value);
+      break;
     case GST_MSDKENC_PROP_EXT_CODING_PROPS:
     {
       const GstStructure *s = gst_value_get_structure (value);
@@ -2292,6 +2355,9 @@ gst_msdkenc_get_common_property (GObject * object, guint prop_id,
     case GST_MSDKENC_PROP_ADAPTIVE_B:
       g_value_set_enum (value, thiz->adaptive_b);
       break;
+    case GST_MSDKENC_PROP_STRING_PARAMS:
+      g_value_set_string (value, thiz->string_params);
+      break;
     case GST_MSDKENC_PROP_EXT_CODING_PROPS:
       gst_value_set_structure (value, thiz->ext_coding_props);
       break;
@@ -2460,6 +2526,26 @@ gst_msdkenc_install_common_properties (GstMsdkEncClass * klass)
       gst_msdkenc_adaptive_b_get_type (),
       PROP_ADAPTIVE_B_DEFAULT, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 
+/**
+ * GstMsdkEnc:string-params
+ *
+ * The property to let user directly set VPL encoding parameters
+ *
+ * Example:
+ * ```
+ * string-params="GopPicSize:60,TargetKbps:5000"
+ * ```
+ *
+ * Since 1.26
+ *
+ */
+  obj_properties[GST_MSDKENC_PROP_STRING_PARAMS] =
+      g_param_spec_string ("string-params", "VPL string API params",
+      "VPL string API allows users to directly give encoder-specific settings by \n"
+      "string-params=key0:value1,key1:value1,key2:value2 "
+      "e.g. string-params=GopPicSize:60,TargetKbps:5000,TargetKbps:5000",
+      PROP_STRING_PARAMS_DEFAULT, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
+
   /**
    * GstMsdkEnc:ext-coding-props
    *
diff --git a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.h b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.h
index aa765bd2b7..71aee2ad75 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.h
+++ b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.h
@@ -98,6 +98,7 @@ enum
   GST_MSDKENC_PROP_LOWDELAY_BRC,
   GST_MSDKENC_PROP_MAX_FRAME_SIZE_I,
   GST_MSDKENC_PROP_MAX_FRAME_SIZE_P,
+  GST_MSDKENC_PROP_STRING_PARAMS,
   GST_MSDKENC_PROP_MAX,
 };
 
@@ -126,6 +127,9 @@ struct _GstMsdkEnc
   mfxExtBuffer *extra_params[MAX_EXTRA_PARAMS];
   guint num_extra_params;
 
+  mfxExtBuffer **extra_string_params;
+  guint num_extra_string_params;
+
   /* Additional encoder coding options */
   mfxExtCodingOption2 option2;
   mfxExtCodingOption3 option3;
@@ -170,6 +174,7 @@ struct _GstMsdkEnc
   guint max_frame_size_i;
   guint max_frame_size_p;
   gint16 lowdelay_brc;
+  gchar *string_params;
 
   GstClockTime start_pts;
   GstClockTime frame_duration;
-- 
2.34.1

