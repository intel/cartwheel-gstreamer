From 0314b5c0d00e42a285b454c7b510ae38b15ab5bb Mon Sep 17 00:00:00 2001
From: Mengkejiergeli Ba <mengkejiergeli.ba@intel.com>
Date: Thu, 19 May 2022 19:18:21 +0800
Subject: [PATCH 15/21] msdkenc: Use va pool as encoder's pool on linux side

---
 .../gst-plugins-bad/sys/msdk/gstmsdkenc.c     | 180 +++++++++---------
 subprojects/gst-plugins-bad/sys/msdk/msdk.c   |  12 ++
 subprojects/gst-plugins-bad/sys/msdk/msdk.h   |   3 +
 3 files changed, 104 insertions(+), 91 deletions(-)

diff --git a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.c b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.c
index 17217396b2..51170a58ce 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.c
+++ b/subprojects/gst-plugins-bad/sys/msdk/gstmsdkenc.c
@@ -962,17 +962,6 @@ gst_msdkenc_queue_frame (GstMsdkEnc * thiz, GstVideoCodecFrame * frame,
   return fdata;
 }
 
-static MsdkSurface *
-gst_msdkenc_create_surface (mfxFrameSurface1 * surface, GstBuffer * buf)
-{
-  MsdkSurface *msdk_surface;
-  msdk_surface = g_slice_new0 (MsdkSurface);
-  msdk_surface->surface = surface;
-  msdk_surface->buf = buf;
-
-  return msdk_surface;
-}
-
 static void
 gst_msdkenc_free_surface (MsdkSurface * surface)
 {
@@ -1352,52 +1341,65 @@ gst_msdkenc_set_src_caps (GstMsdkEnc * thiz)
   return TRUE;
 }
 
+#ifndef _WIN32
 static GstBufferPool *
-gst_msdkenc_create_buffer_pool (GstMsdkEnc * thiz, GstCaps * caps,
-    guint num_buffers, gboolean set_align)
+gst_msdk_create_va_pool (GstMsdkEnc * thiz, guint num_buffers)
 {
   GstBufferPool *pool = NULL;
-  GstStructure *config;
-  GstAllocator *allocator = NULL;
-  GstVideoInfo info;
-  GstVideoAlignment align;
-  GstAllocationParams params = { 0, 31, 0, 0, };
-  mfxFrameAllocResponse *alloc_resp = NULL;
+  GstAllocator *allocator;
+  GArray *formats = NULL;
+  GstAllocationParams alloc_params = { 0, 31, 0, 0 };
+  GstVaDisplay *display = NULL;
+  GstCaps *aligned_caps = NULL;
+  GstVideoInfo info = thiz->input_state->info;
 
-  if (thiz->has_vpp)
-    alloc_resp = set_align ? &thiz->vpp_alloc_resp : &thiz->alloc_resp;
-  else
-    alloc_resp = &thiz->alloc_resp;
+  display = (GstVaDisplay *) gst_msdk_context_get_display (thiz->context);
 
-  pool = gst_msdk_buffer_pool_new (thiz->context, alloc_resp);
-  if (!pool)
-    goto error_no_pool;
+  if (thiz->use_dmabuf) {
+    allocator = gst_va_dmabuf_allocator_new (display);
+  } else {
+    formats = g_array_new (FALSE, FALSE, sizeof (GstVideoFormat));
+    g_array_append_val (formats, GST_VIDEO_INFO_FORMAT (&info));
+    allocator = gst_va_allocator_new (display, formats);
+  }
 
-  if (!gst_video_info_from_caps (&info, caps)) {
-    GST_INFO_OBJECT (thiz, "failed to get video info");
+  if (!allocator) {
+    GST_ERROR_OBJECT (thiz, "failed to create allocator");
+    if (formats)
+      g_array_unref (formats);
     return NULL;
   }
 
-  gst_msdk_set_video_alignment (&info, 0, 0, &align);
-  gst_video_info_align (&info, &align);
+  aligned_caps = gst_video_info_to_caps (&info);
+  pool =
+      gst_va_pool_new_with_config (aligned_caps,
+      GST_VIDEO_INFO_SIZE (&info), num_buffers, 0,
+      VA_SURFACE_ATTRIB_USAGE_HINT_GENERIC, GST_VA_FEATURE_AUTO,
+      allocator, &alloc_params);
 
-  if (thiz->use_dmabuf)
-    allocator =
-        gst_msdk_dmabuf_allocator_new (thiz->context, &info, alloc_resp);
-  else if (thiz->use_video_memory)
-    allocator = gst_msdk_video_allocator_new (thiz->context, &info, alloc_resp);
-  else
-    allocator = gst_msdk_system_allocator_new (&info);
+  gst_object_unref (allocator);
+  gst_caps_unref (aligned_caps);
+  GST_LOG_OBJECT (thiz, "Creating va pool");
+  return pool;
+}
+#endif
 
-  if (!allocator)
-    goto error_no_allocator;
+static GstBufferPool *
+gst_msdkenc_create_buffer_pool (GstMsdkEnc * thiz, GstCaps * caps,
+    guint num_buffers, gboolean set_align)
+{
+  GstBufferPool *pool = NULL;
+  GstStructure *config;
 
-  config = gst_buffer_pool_get_config (GST_BUFFER_POOL_CAST (pool));
-  gst_buffer_pool_config_set_params (config, caps, info.size, num_buffers, 0);
-  gst_buffer_pool_config_add_option (config, GST_BUFFER_POOL_OPTION_VIDEO_META);
-  gst_buffer_pool_config_add_option (config,
-      GST_BUFFER_POOL_OPTION_VIDEO_ALIGNMENT);
+#ifndef _WIN32
+  pool = gst_msdk_create_va_pool (thiz, num_buffers);
+#else
+  GST_ERROR ("D3D11 pool not implemented yet");
+#endif
+  if (!pool)
+    goto error_no_pool;
 
+  config = gst_buffer_pool_get_config (GST_BUFFER_POOL_CAST (pool));
   if (thiz->use_video_memory) {
     gst_buffer_pool_config_add_option (config,
         GST_BUFFER_POOL_OPTION_MSDK_USE_VIDEO_MEMORY);
@@ -1405,16 +1407,17 @@ gst_msdkenc_create_buffer_pool (GstMsdkEnc * thiz, GstCaps * caps,
       gst_buffer_pool_config_add_option (config,
           GST_BUFFER_POOL_OPTION_MSDK_USE_DMABUF);
   }
-
-  gst_buffer_pool_config_set_video_alignment (config, &align);
-  gst_buffer_pool_config_set_allocator (config, allocator, &params);
-  gst_object_unref (allocator);
-
   if (!gst_buffer_pool_set_config (pool, config))
     goto error_pool_config;
 
-  if (set_align)
+  if (set_align) {
+    GstVideoInfo info = thiz->input_state->info;
+    GstVideoAlignment align;
+
+    gst_msdk_set_video_alignment (&info, 0, 0, &align);
+    gst_video_info_align (&info, &align);
     thiz->aligned_info = info;
+  }
 
   return pool;
 
@@ -1423,17 +1426,10 @@ error_no_pool:
     GST_INFO_OBJECT (thiz, "failed to create bufferpool");
     return NULL;
   }
-error_no_allocator:
-  {
-    GST_INFO_OBJECT (thiz, "failed to create allocator");
-    gst_object_unref (pool);
-    return NULL;
-  }
 error_pool_config:
   {
     GST_INFO_OBJECT (thiz, "failed to set config");
     gst_object_unref (pool);
-    gst_object_unref (allocator);
     return NULL;
   }
 }
@@ -1609,37 +1605,6 @@ done:
   return TRUE;
 }
 
-static MsdkSurface *
-gst_msdkenc_get_surface_from_pool (GstMsdkEnc * thiz, GstBufferPool * pool,
-    GstBufferPoolAcquireParams * params)
-{
-  GstBuffer *new_buffer;
-  mfxFrameSurface1 *new_surface;
-  MsdkSurface *msdk_surface;
-
-  if (!gst_buffer_pool_is_active (pool) &&
-      !gst_buffer_pool_set_active (pool, TRUE)) {
-    GST_ERROR_OBJECT (pool, "failed to activate buffer pool");
-    return NULL;
-  }
-
-  if (gst_buffer_pool_acquire_buffer (pool, &new_buffer, params) != GST_FLOW_OK) {
-    GST_ERROR_OBJECT (pool, "failed to acquire a buffer from pool");
-    return NULL;
-  }
-
-  if (gst_msdk_is_msdk_buffer (new_buffer))
-    new_surface = gst_msdk_get_surface_from_buffer (new_buffer);
-  else {
-    GST_ERROR_OBJECT (pool, "the acquired memory is not MSDK memory");
-    return NULL;
-  }
-
-  msdk_surface = gst_msdkenc_create_surface (new_surface, new_buffer);
-
-  return msdk_surface;
-}
-
 #ifndef _WIN32
 static gboolean
 import_dmabuf_to_msdk_surface (GstMsdkEnc * thiz, GstBuffer * buf,
@@ -1751,6 +1716,34 @@ import_va_surface_to_msdk (GstMsdkEnc * thiz, GstBuffer * buf,
 }
 #endif
 
+static MsdkSurface *
+gst_msdkenc_get_surface_from_pool (GstMsdkEnc * thiz, GstBufferPool * pool,
+    GstBufferPoolAcquireParams * params)
+{
+  GstBuffer *new_buffer;
+  MsdkSurface *msdk_surface;
+  GstMemory *mem;
+
+  if (!gst_buffer_pool_is_active (pool) &&
+      !gst_buffer_pool_set_active (pool, TRUE)) {
+    GST_ERROR_OBJECT (pool, "failed to activate buffer pool");
+    return NULL;
+  }
+
+  if (gst_buffer_pool_acquire_buffer (pool, &new_buffer, params) != GST_FLOW_OK) {
+    GST_ERROR_OBJECT (pool, "failed to acquire a buffer from pool");
+    return NULL;
+  }
+
+  mem = gst_buffer_peek_memory (new_buffer, 0);
+  if (gst_msdk_is_va_mem (mem)) {
+    msdk_surface = g_slice_new0 (MsdkSurface);
+    if (import_va_surface_to_msdk (thiz, new_buffer, msdk_surface))
+      return msdk_surface;
+  }
+  return NULL;
+}
+
 static MsdkSurface *
 gst_msdkenc_get_surface_from_frame (GstMsdkEnc * thiz,
     GstVideoCodecFrame * frame)
@@ -1769,7 +1762,8 @@ gst_msdkenc_get_surface_from_frame (GstMsdkEnc * thiz,
     return msdk_surface;
   }
 #ifndef _WIN32
-  if (thiz->use_va) {
+  mem = gst_buffer_peek_memory (inbuf, 0);
+  if (gst_msdk_is_va_mem (mem)) {
     msdk_surface = g_slice_new0 (MsdkSurface);
     if (import_va_surface_to_msdk (thiz, inbuf, msdk_surface))
       return msdk_surface;
@@ -1777,7 +1771,6 @@ gst_msdkenc_get_surface_from_frame (GstMsdkEnc * thiz,
       g_slice_free (MsdkSurface, msdk_surface);
   }
 
-  mem = gst_buffer_peek_memory (inbuf, 0);
   if (gst_is_dmabuf_memory (mem)) {
     msdk_surface = g_slice_new0 (MsdkSurface);
     if (import_dmabuf_to_msdk_surface (thiz, inbuf, msdk_surface))
@@ -1794,6 +1787,11 @@ gst_msdkenc_get_surface_from_frame (GstMsdkEnc * thiz,
           gst_msdkenc_get_surface_from_pool (thiz, thiz->msdk_pool, NULL)))
     goto error;
 
+  /* when importing va memory to get msdk surface, we have increased the
+   * msdk_surface->buf refcount, here we need to unref it.
+   */
+  gst_buffer_unref (msdk_surface->buf);
+
   if (!gst_video_frame_map (&src_frame, &thiz->input_state->info, inbuf,
           GST_MAP_READ)) {
     GST_ERROR_OBJECT (thiz, "failed to map the frame for source");
@@ -2109,7 +2107,7 @@ gst_msdkenc_propose_allocation (GstVideoEncoder * encoder, GstQuery * query)
   }
 
   num_buffers = gst_msdkenc_maximum_delayed_frames (thiz) + 1;
-  pool = gst_msdkenc_create_buffer_pool (thiz, caps, num_buffers, TRUE);
+  pool = gst_msdkenc_create_buffer_pool (thiz, caps, num_buffers, FALSE);
 
   gst_query_add_allocation_pool (query, pool, GST_VIDEO_INFO_SIZE (&info),
       num_buffers, 0);
diff --git a/subprojects/gst-plugins-bad/sys/msdk/msdk.c b/subprojects/gst-plugins-bad/sys/msdk/msdk.c
index a415e1016c..6abc5c63d2 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/msdk.c
+++ b/subprojects/gst-plugins-bad/sys/msdk/msdk.c
@@ -553,6 +553,18 @@ gst_msdk_is_msdk_buffer (GstBuffer * buf)
     return FALSE;
 }
 
+gboolean
+gst_msdk_is_va_mem (GstMemory * mem)
+{
+  GstAllocator *allocator;
+
+  allocator = mem->allocator;
+  if (!allocator)
+    return FALSE;
+
+  return g_str_equal (allocator->mem_type, "VAMemory");
+}
+
 mfxFrameSurface1 *
 gst_msdk_get_surface_from_buffer (GstBuffer * buf)
 {
diff --git a/subprojects/gst-plugins-bad/sys/msdk/msdk.h b/subprojects/gst-plugins-bad/sys/msdk/msdk.h
index c47107aa8b..cb76fd516d 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/msdk.h
+++ b/subprojects/gst-plugins-bad/sys/msdk/msdk.h
@@ -130,6 +130,9 @@ void gst_msdk_set_mfx_frame_info_from_video_info (mfxFrameInfo * mfx_info,
 gboolean
 gst_msdk_is_msdk_buffer (GstBuffer * buf);
 
+gboolean
+gst_msdk_is_va_mem (GstMemory * mem);
+
 mfxFrameSurface1 *
 gst_msdk_get_surface_from_buffer (GstBuffer * buf);
 
-- 
2.25.1

